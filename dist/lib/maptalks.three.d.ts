export function initialize(): void;
export function onmessage(message: any, postResponse: any): void;
export const __esModule: boolean;
export function cylinder(point: any, options: any): {
    points: Float32Array;
    indices: Uint32Array;
    position: Float32Array;
    normal: Float32Array;
    uv: Float32Array;
};
export function expandLine(line: any, options: any): {
    offsetPoints: any[][];
    leftPoints: any[][];
    rightPoints: any[][];
};
export function extrudePolygons(polygons: any, options: any): {
    position: any;
    normal: any;
    uv: any;
    indices: any;
    results: any;
};
export function extrudePolylines(lines: any, options: any): {
    position: any;
    normal: any;
    uv: any;
    indices: any;
    results: any;
};
declare const BaseObject_base: any;
export class BaseObject extends BaseObject_base {
    [x: string]: any;
    constructor(id: any);
    isAdd: boolean;
    _mouseover: boolean;
    _visible: boolean;
    _zoomVisible: boolean;
    picked: boolean;
    isBaseObject: boolean;
    id: any;
    addTo(layer: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    remove(): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    getObject3d(): any;
    getId(): any;
    setId(id: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    getType(): any;
    getOptions(): any;
    getProperties(): any;
    setProperties(property: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    getLayer(): any;
    getMap(): any;
    getCenter(): any;
    getAltitude(): any;
    setAltitude(altitude: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    supportHeight(): any;
    getHeight(): any;
    setHeight(height: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    show(): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    hide(): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    isVisible(): boolean;
    getSymbol(): any;
    setSymbol(material: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    setInfoWindow(options: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    infoWindow: any;
    getInfoWindow(): any;
    openInfoWindow(coordinate: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    closeInfoWindow(): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    removeInfoWindow(): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    setToolTip(content: any, options: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    toolTip: any;
    getToolTip(): any;
    openToolTip(coordinate: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    closeToolTip(): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    removeToolTip(): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    _hideUI(): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    animateShow(options: any, cb: any): any;
    _showPlayer: any;
    getMinZoom(): any;
    getMaxZoom(): any;
    isAsynchronous(): any;
    get bloom(): any;
    fire(eventType: any, param: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    config(): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    setPickObject3d(object3d: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    pickObject3d: any;
    _initOptions(options: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    options: any;
    _createMesh(geometry: any, material: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    object3d: any;
    _createInstancedMesh(geometry: any, material: any, count: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    _createGroup(): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    _createLine(geometry: any, material: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    _createLine2(geometry: any, material: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    _createPoints(geometry: any, material: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    _createLineSegments(geometry: any, material: any): {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    _computeLineDistances(geometry: any): void;
}
export class BaseObjectTask {
    queueMap: {};
    tempQueue: any[];
    time: any;
    deQueueCount: number;
    resultQueue: any[];
    getActor(): any;
    getCurrentTime(): any;
    loop(): void;
    push(data: any): {
        queueMap: {};
        tempQueue: any[];
        time: any;
        deQueueCount: number;
        resultQueue: any[];
        getActor(): any;
        getCurrentTime(): any;
        loop(): void;
        push(data: any): any;
        reset(): any;
        pushResult(result: any): any | undefined;
        deQueue(): any;
    };
    reset(): {
        queueMap: {};
        tempQueue: any[];
        time: any;
        deQueueCount: number;
        resultQueue: any[];
        getActor(): any;
        getCurrentTime(): any;
        loop(): void;
        push(data: any): any;
        reset(): any;
        pushResult(result: any): any | undefined;
        deQueue(): any;
    };
    pushResult(result: any): {
        queueMap: {};
        tempQueue: any[];
        time: any;
        deQueueCount: number;
        resultQueue: any[];
        getActor(): any;
        getCurrentTime(): any;
        loop(): void;
        push(data: any): any;
        reset(): any;
        pushResult(result: any): any | undefined;
        deQueue(): any;
    } | undefined;
    deQueue(): {
        queueMap: {};
        tempQueue: any[];
        time: any;
        deQueueCount: number;
        resultQueue: any[];
        getActor(): any;
        getCurrentTime(): any;
        loop(): void;
        push(data: any): any;
        reset(): any;
        pushResult(result: any): any | undefined;
        deQueue(): any;
    };
}
export namespace BaseObjectTaskManager {
    const isRunning: boolean;
    const tasks: never[];
    function addTask(taskIns: any): void;
    function removeTask(taskIns: any): void;
    function loop(): void;
    function star(): void;
}
export var ExtrudeUtil: Readonly<{
    __proto__: null;
    getExtrudeGeometry: (polygon: maptalks.Polygon | maptalks.MultiPolygon, height: any, layer: any, center: any) => any;
    getExtrudeGeometryParams: (polygon: any, height: any, layer: any, center: any, centerPt: any, altCache: any) => {
        position: any;
        normal: any;
        uv: any;
        indices: any;
    } | null;
    initVertexColors: (geometry: any, color: any, _topColor: any, minZ: any) => Float32Array;
    getPolygonPositions: (polygon: any, layer: any, center: any, centerPt: any, isArrayBuff?: boolean) => any;
    getSinglePolygonPositions: (polygon: any, layer: any, center: any, centerPt: any, isArrayBuff?: boolean) => any[];
    getPolygonArrayBuffer: (polygon: any) => any;
    getSinglePolygonArrayBuffer: (polygon: any, isGeoJSON: any) => ArrayBufferLike[];
}>;
export var GeoJSONUtil: Readonly<{
    __proto__: null;
    isGeoJSON: (feature: any) => boolean;
    isGeoJSONPolygon: (feature: any) => boolean;
    isGeoJSONLine: (feature: any) => boolean;
    isGeoJSONPoint: (feature: any) => boolean;
    isGeoJSONMulti: (feature: any) => boolean;
    getGeoJSONCoordinates: (feature: any) => any;
    getGeoJSONCenter: (feature: any, out: any) => any;
    spliteGeoJSONMulti: (feature: any) => any[] | null;
}>;
export var GeoUtil: Readonly<{
    __proto__: null;
    distance: (c1: any, c2: any) => number;
    lineLength: (polyline: any) => number;
    lineSlice: (cs: any, lineChunkLength?: any) => any[][];
}>;
export var IdentifyUtil: Readonly<{
    __proto__: null;
    vectors2Pixel: (worldPoints: any, size: any, camera: any, altitude: number | undefined, layer: any) => any;
    vector2Pixel: (world_vector: any, size: any, camera: any) => {
        x: number;
        y: number;
    };
}>;
declare const LineMaterial_base: any;
export class LineMaterial extends LineMaterial_base {
    [x: string]: any;
    constructor(parameters: any);
    dashed: boolean;
    isLineMaterial: boolean;
    type: string;
}
export var LineUtil: Readonly<{
    __proto__: null;
    getLinePosition: (lineString: maptalks.LineString, layer: {
        [x: string]: any;
        _animationBaseObjectMap: {};
        _needsUpdate: boolean;
        _mousemoveTimeOut: number;
        _mousedownTime: number;
        _baseObjects: any[];
        _delayMeshes: any[];
        type: string;
        isMercator(): boolean;
        isRendering(): any;
        prepareToDraw(...args: any[]): void;
        draw(gl: any, view: any, scene: any, camera: any, timeStamp: any, context: any): void;
        drawOnInteracting(gl: any, view: any, scene: any, camera: any, event: any, timeStamp: any, context: any): void;
        coordinateToVector3(coordinate: maptalks.Coordinate, z?: number | undefined, out: any): THREE.Vector3;
        coordinatiesToGLFloatArray(coordinaties: any, centerPt: any): {
            positions: Float32Array;
            positons2d: Float32Array;
        } | null;
        coordinatiesToGLArray(coordinaties: any, centerPt: any): any[] | null;
        distanceToVector3(w: number, h: number, coord: any): THREE.Vector3;
        altitudeToVector3(altitude: any, altitude1: any, coord: any, out: any): any;
        toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape;
        toExtrudeMesh(polygon: any, altitude: any, material: any, height: any): any;
        toExtrudePolygon(polygon: maptalks.Polygon | maptalks.MultiPolygon, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBar(coordinate: maptalks.Coordinate, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toLine(lineString: maptalks.LineString, options: Object, material: THREE.LineMaterial): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLine(lineString: maptalks.LineString, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toModel(model: THREE.Mesh | THREE.Group, options: Object): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLineTrail(lineString: maptalks.LineString, options: any, material: THREE.Material): {
            [x: string]: any;
            _params: {
                index: number;
                chunkLines: any[][];
                geometries: never[];
                layer: any;
                trail: number;
                lineWidth: any;
                depth: any;
                speed: number;
                idx: number;
                loaded: boolean;
                center: any;
                centerPt: any;
                workerInitCount: number;
            };
            type: string;
            _init(params: any): void;
            _animation(): void;
            _workerLoad(result: any): any | undefined;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudePolygons(polygons: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toPoint(coordinate: maptalks.Coordinate, options: any, material: any): {
            [x: string]: any;
            type: string;
            identify(coordinate: maptalks.Coordinate): boolean;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toPoints(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            faceIndex: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            _geometryCache: any;
            isHide: boolean;
            _grids: {
                minlng: any;
                minlat: any;
                maxlng: any;
                maxlat: any;
                minx: number;
                miny: number;
                maxx: number;
                maxy: number;
                coordinates: any[];
                positions: any[];
                indexs: any[];
                key: any;
                updateBBoxPixel(map: any): any;
                containsCoordinate(c: any): boolean;
                isRecCross(pixel: any, size: any): boolean;
            }[];
            type: string;
            maxSize: number;
            _bindMapEvents(): void;
            _updateGrids(): void;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: maptalks.Coordinate): boolean;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toBars(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                _workerLoad(data: any): void;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(): any;
            getSelectMesh(): {
                data: any;
                baseObject: {
                    [x: string]: any;
                    type: string;
                    _workerLoad(data: any): void;
                    isAdd: boolean;
                    _mouseover: boolean;
                    _visible: boolean;
                    _zoomVisible: boolean;
                    picked: boolean;
                    isBaseObject: boolean;
                    id: any;
                    addTo(layer: any): any;
                    remove(): any;
                    getObject3d(): any;
                    getId(): any;
                    setId(id: any): any;
                    getType(): any;
                    getOptions(): any;
                    getProperties(): any;
                    setProperties(property: any): any;
                    getLayer(): any;
                    getMap(): any;
                    getCenter(): any;
                    getAltitude(): any;
                    setAltitude(altitude: any): any;
                    supportHeight(): any;
                    getHeight(): any;
                    setHeight(height: any): any;
                    show(): any;
                    hide(): any;
                    isVisible(): boolean;
                    getSymbol(): any;
                    setSymbol(material: any): any;
                    setInfoWindow(options: any): any;
                    infoWindow: any;
                    getInfoWindow(): any;
                    openInfoWindow(coordinate: any): any;
                    closeInfoWindow(): any;
                    removeInfoWindow(): any;
                    setToolTip(content: any, options: any): any;
                    toolTip: any;
                    getToolTip(): any;
                    openToolTip(coordinate: any): any;
                    closeToolTip(): any;
                    removeToolTip(): any;
                    _hideUI(): any;
                    animateShow(options: any, cb: any): any;
                    _showPlayer: any;
                    getMinZoom(): any;
                    getMaxZoom(): any;
                    isAsynchronous(): any;
                    readonly bloom: any;
                    fire(eventType: any, param: any): any;
                    config(): any;
                    setPickObject3d(object3d: any): any;
                    pickObject3d: any;
                    _initOptions(options: any): any;
                    options: any;
                    _createMesh(geometry: any, material: any): any;
                    object3d: any;
                    _createInstancedMesh(geometry: any, material: any, count: any): any;
                    _createGroup(): any;
                    _createLine(geometry: any, material: any): any;
                    _createLine2(geometry: any, material: any): any;
                    _createPoints(geometry: any, material: any): any;
                    _createLineSegments(geometry: any, material: any): any;
                    _computeLineDistances(geometry: any): void;
                };
            } | undefined;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toExtrudeLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _setPickObject3d(): void;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toThreeVectorTileLayer(url: any, options: any, getMaterial: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            getMaterial: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _layerLaodTime: number;
            formatBaseObjects(index: any, json: any): any[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            _getMaterial(layerName: any, data: any, index: any, geojson: any): any;
            material: any;
            isAsynchronous(): any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toTerrain(extent: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            updateData(image: any): any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toTerrainVectorTileLayer(url: any, options: any, material: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            material: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _imgQueue: {};
            _layerLaodTime: number;
            isAsynchronous(): boolean;
            formatBaseObjects(index: any, image: any): {
                [x: string]: any;
                type: string;
                updateData(image: any): any;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            getMaterial: any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toHeatMap(data: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLine(lineString: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            _init(): void;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): boolean;
            setSymbol(material: any): any;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLines(lineStrings: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceStart: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceEnd: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: {
                [x: string]: any;
                isLineGeometry: boolean;
                type: string;
                fromLine(line: any): any;
                isLineSegmentsGeometry: boolean;
                applyMatrix(matrix: any): any;
                setPositions(array: any): any;
                setColors(array: any): any;
                fromWireframeGeometry(geometry: any): any;
                fromEdgesGeometry(geometry: any): any;
                fromMesh(mesh: any): any;
                fromLineSegements(lineSegments: any): any;
                computeBoundingBox(): void;
                boundingBox: any;
                computeBoundingSphere(): void;
                boundingSphere: any;
                toJSON(): void;
                copy(source: any): any;
            };
            _colorMap: {};
            isHide: boolean;
            type: string;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): any;
            setSymbol(material: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toBox(coorindate: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBoxs(points: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(coordinate: any): any;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        getBaseObjects(): any[];
        getMeshes(): any[];
        clear(): any;
        clearMesh(): any;
        lookAt(vector: any): any;
        getCamera(): any;
        getScene(): any;
        renderScene(context: any, layer: any): any;
        loop(render?: boolean): void;
        renderPickScene(): any;
        getThreeRenderer(): any;
        getPick(): any;
        delayAddMesh(meshes: any): any;
        addMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        removeMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        _initRaycaster(): any;
        _raycaster: any;
        _mouse: any;
        getRaycaster(): any;
        identify(coordinate: Coordinate, options: Object): any[];
        _containerPoint: any;
        _recursionMesh(mesh: any): any;
        _getLinePrecision(res?: number): number;
        _identifyBaseObjectEvents(event: any): any;
        _getEventParams(e: any): {
            domEvent: any;
        };
        _zoomend(): void;
        _getGeometryEventMapPanel(): any;
        onAdd(): any;
        _identifyBaseObjectEventsThis: ((event: any) => any) | undefined;
        _zoomendThis: (() => void) | undefined;
        onRemove(): any;
        _callbackBaseObjectAnimation(): any;
        _getFovRatio(): number;
    }, center: any, hasVectorArray?: boolean) => {
        positions: Float32Array | undefined;
        positionsV: any[];
        positions2d: Float32Array | undefined;
        arrayBuffer: ArrayBufferLike;
    };
    getExtrudeLineGeometry: (lineString: maptalks.LineString, lineWidth: number | undefined, depth: number | undefined, layer: {
        [x: string]: any;
        _animationBaseObjectMap: {};
        _needsUpdate: boolean;
        _mousemoveTimeOut: number;
        _mousedownTime: number;
        _baseObjects: any[];
        _delayMeshes: any[];
        type: string;
        isMercator(): boolean;
        isRendering(): any;
        prepareToDraw(...args: any[]): void;
        draw(gl: any, view: any, scene: any, camera: any, timeStamp: any, context: any): void;
        drawOnInteracting(gl: any, view: any, scene: any, camera: any, event: any, timeStamp: any, context: any): void;
        coordinateToVector3(coordinate: maptalks.Coordinate, z?: number | undefined, out: any): THREE.Vector3;
        coordinatiesToGLFloatArray(coordinaties: any, centerPt: any): {
            positions: Float32Array;
            positons2d: Float32Array;
        } | null;
        coordinatiesToGLArray(coordinaties: any, centerPt: any): any[] | null;
        distanceToVector3(w: number, h: number, coord: any): THREE.Vector3;
        altitudeToVector3(altitude: any, altitude1: any, coord: any, out: any): any;
        toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape;
        toExtrudeMesh(polygon: any, altitude: any, material: any, height: any): any;
        toExtrudePolygon(polygon: maptalks.Polygon | maptalks.MultiPolygon, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBar(coordinate: maptalks.Coordinate, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toLine(lineString: maptalks.LineString, options: Object, material: THREE.LineMaterial): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLine(lineString: maptalks.LineString, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toModel(model: THREE.Mesh | THREE.Group, options: Object): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLineTrail(lineString: maptalks.LineString, options: any, material: THREE.Material): {
            [x: string]: any;
            _params: {
                index: number;
                chunkLines: any[][];
                geometries: never[];
                layer: any;
                trail: number;
                lineWidth: any;
                depth: any;
                speed: number;
                idx: number;
                loaded: boolean;
                center: any;
                centerPt: any;
                workerInitCount: number;
            };
            type: string;
            _init(params: any): void;
            _animation(): void;
            _workerLoad(result: any): any | undefined;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudePolygons(polygons: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toPoint(coordinate: maptalks.Coordinate, options: any, material: any): {
            [x: string]: any;
            type: string;
            identify(coordinate: maptalks.Coordinate): boolean;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toPoints(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            faceIndex: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            _geometryCache: any;
            isHide: boolean;
            _grids: {
                minlng: any;
                minlat: any;
                maxlng: any;
                maxlat: any;
                minx: number;
                miny: number;
                maxx: number;
                maxy: number;
                coordinates: any[];
                positions: any[];
                indexs: any[];
                key: any;
                updateBBoxPixel(map: any): any;
                containsCoordinate(c: any): boolean;
                isRecCross(pixel: any, size: any): boolean;
            }[];
            type: string;
            maxSize: number;
            _bindMapEvents(): void;
            _updateGrids(): void;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: maptalks.Coordinate): boolean;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toBars(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                _workerLoad(data: any): void;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(): any;
            getSelectMesh(): {
                data: any;
                baseObject: {
                    [x: string]: any;
                    type: string;
                    _workerLoad(data: any): void;
                    isAdd: boolean;
                    _mouseover: boolean;
                    _visible: boolean;
                    _zoomVisible: boolean;
                    picked: boolean;
                    isBaseObject: boolean;
                    id: any;
                    addTo(layer: any): any;
                    remove(): any;
                    getObject3d(): any;
                    getId(): any;
                    setId(id: any): any;
                    getType(): any;
                    getOptions(): any;
                    getProperties(): any;
                    setProperties(property: any): any;
                    getLayer(): any;
                    getMap(): any;
                    getCenter(): any;
                    getAltitude(): any;
                    setAltitude(altitude: any): any;
                    supportHeight(): any;
                    getHeight(): any;
                    setHeight(height: any): any;
                    show(): any;
                    hide(): any;
                    isVisible(): boolean;
                    getSymbol(): any;
                    setSymbol(material: any): any;
                    setInfoWindow(options: any): any;
                    infoWindow: any;
                    getInfoWindow(): any;
                    openInfoWindow(coordinate: any): any;
                    closeInfoWindow(): any;
                    removeInfoWindow(): any;
                    setToolTip(content: any, options: any): any;
                    toolTip: any;
                    getToolTip(): any;
                    openToolTip(coordinate: any): any;
                    closeToolTip(): any;
                    removeToolTip(): any;
                    _hideUI(): any;
                    animateShow(options: any, cb: any): any;
                    _showPlayer: any;
                    getMinZoom(): any;
                    getMaxZoom(): any;
                    isAsynchronous(): any;
                    readonly bloom: any;
                    fire(eventType: any, param: any): any;
                    config(): any;
                    setPickObject3d(object3d: any): any;
                    pickObject3d: any;
                    _initOptions(options: any): any;
                    options: any;
                    _createMesh(geometry: any, material: any): any;
                    object3d: any;
                    _createInstancedMesh(geometry: any, material: any, count: any): any;
                    _createGroup(): any;
                    _createLine(geometry: any, material: any): any;
                    _createLine2(geometry: any, material: any): any;
                    _createPoints(geometry: any, material: any): any;
                    _createLineSegments(geometry: any, material: any): any;
                    _computeLineDistances(geometry: any): void;
                };
            } | undefined;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toExtrudeLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _setPickObject3d(): void;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toThreeVectorTileLayer(url: any, options: any, getMaterial: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            getMaterial: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _layerLaodTime: number;
            formatBaseObjects(index: any, json: any): any[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            _getMaterial(layerName: any, data: any, index: any, geojson: any): any;
            material: any;
            isAsynchronous(): any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toTerrain(extent: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            updateData(image: any): any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toTerrainVectorTileLayer(url: any, options: any, material: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            material: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _imgQueue: {};
            _layerLaodTime: number;
            isAsynchronous(): boolean;
            formatBaseObjects(index: any, image: any): {
                [x: string]: any;
                type: string;
                updateData(image: any): any;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            getMaterial: any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toHeatMap(data: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLine(lineString: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            _init(): void;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): boolean;
            setSymbol(material: any): any;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLines(lineStrings: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceStart: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceEnd: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: {
                [x: string]: any;
                isLineGeometry: boolean;
                type: string;
                fromLine(line: any): any;
                isLineSegmentsGeometry: boolean;
                applyMatrix(matrix: any): any;
                setPositions(array: any): any;
                setColors(array: any): any;
                fromWireframeGeometry(geometry: any): any;
                fromEdgesGeometry(geometry: any): any;
                fromMesh(mesh: any): any;
                fromLineSegements(lineSegments: any): any;
                computeBoundingBox(): void;
                boundingBox: any;
                computeBoundingSphere(): void;
                boundingSphere: any;
                toJSON(): void;
                copy(source: any): any;
            };
            _colorMap: {};
            isHide: boolean;
            type: string;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): any;
            setSymbol(material: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toBox(coorindate: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBoxs(points: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(coordinate: any): any;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        getBaseObjects(): any[];
        getMeshes(): any[];
        clear(): any;
        clearMesh(): any;
        lookAt(vector: any): any;
        getCamera(): any;
        getScene(): any;
        renderScene(context: any, layer: any): any;
        loop(render?: boolean): void;
        renderPickScene(): any;
        getThreeRenderer(): any;
        getPick(): any;
        delayAddMesh(meshes: any): any;
        addMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        removeMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        _initRaycaster(): any;
        _raycaster: any;
        _mouse: any;
        getRaycaster(): any;
        identify(coordinate: Coordinate, options: Object): any[];
        _containerPoint: any;
        _recursionMesh(mesh: any): any;
        _getLinePrecision(res?: number): number;
        _identifyBaseObjectEvents(event: any): any;
        _getEventParams(e: any): {
            domEvent: any;
        };
        _zoomend(): void;
        _getGeometryEventMapPanel(): any;
        onAdd(): any;
        _identifyBaseObjectEventsThis: ((event: any) => any) | undefined;
        _zoomendThis: (() => void) | undefined;
        onRemove(): any;
        _callbackBaseObjectAnimation(): any;
        _getFovRatio(): number;
    }, center: any) => any;
    getChunkLinesPosition: (chunkLines: any, layer: any, positionMap: any, centerPt: any) => {
        positions: any[];
        positionsV: any[];
        lnglats: any[];
    };
    mergeChunkLineCoordinates: (chunkLines: any) => any[];
    getExtrudeLineParams: (lineString: any, lineWidth: any, depth: any, layer: any, center: any) => {
        position: any;
        normal: any;
        indices: any;
        uv: any;
    };
    LineStringSplit: (lineString: any) => {
        lineStrings: any;
        center: any;
    };
    setLineSegmentPosition: (position: any, positionsV: any) => void;
    getLineSegmentPosition: (ps: any) => Float32Array;
    mergeLinePositions: (positionsList: any) => any;
    getLineArrayBuffer: (lineString: any) => ArrayBuffer | undefined;
    getDefaultLineGeometry: () => any;
}>;
export var MergeGeometryUtil: Readonly<{
    __proto__: null;
    mergeBufferGeometries: (geometries: any) => any;
    mergeBufferGeometriesAttribute: (geometries: any) => {
        indices: Uint32Array;
    } | null;
    generateBufferGeometry: (data: any) => any;
    generatePickBufferGeometry: (geometry: any) => any;
    getDefaultBufferGeometry: () => any;
}>;
export function MergedMixin(Base: any): {
    new (): {
        [x: string]: any;
        _initBaseObjectsEvent(baseObjects: any): any;
        _proxyEvent(baseObject: any): void;
        _mouseover: boolean | undefined;
        _getHideGeometryIndex(attribute: any): {
            indexs: number[];
            count: number;
        };
        _updateAttribute(bufferAttribute: any, attribute: any): any;
        _showGeometry(baseObject: any, isHide: any): any;
        isHide: any;
        getSelectMesh(): {
            data: any;
            baseObject: any;
        } | undefined;
        _getIndex(faceIndex: any): any;
        _init(): void;
        _setPickObject3d(): void;
    };
    [x: string]: any;
};
declare const ThreeLayer_base: any;
export class ThreeLayer extends ThreeLayer_base {
    [x: string]: any;
    constructor(id: any, options: any);
    _animationBaseObjectMap: {};
    _needsUpdate: boolean;
    _mousemoveTimeOut: number;
    _mousedownTime: number;
    _baseObjects: any[];
    _delayMeshes: any[];
    type: string;
    isMercator(): boolean;
    isRendering(): any;
    prepareToDraw(...args: any[]): void;
    draw(gl: any, view: any, scene: any, camera: any, timeStamp: any, context: any): void;
    drawOnInteracting(gl: any, view: any, scene: any, camera: any, event: any, timeStamp: any, context: any): void;
    coordinateToVector3(coordinate: maptalks.Coordinate, z?: number | undefined, out: any): THREE.Vector3;
    coordinatiesToGLFloatArray(coordinaties: any, centerPt: any): {
        positions: Float32Array;
        positons2d: Float32Array;
    } | null;
    coordinatiesToGLArray(coordinaties: any, centerPt: any): any[] | null;
    distanceToVector3(w: number, h: number, coord: any): THREE.Vector3;
    altitudeToVector3(altitude: any, altitude1: any, coord: any, out: any): any;
    toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape;
    toExtrudeMesh(polygon: any, altitude: any, material: any, height: any): any;
    toExtrudePolygon(polygon: maptalks.Polygon | maptalks.MultiPolygon, options: Object, material: THREE.Material): {
        [x: string]: any;
        type: string;
        _workerLoad(data: any): void;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    toBar(coordinate: maptalks.Coordinate, options: Object, material: THREE.Material): {
        [x: string]: any;
        type: string;
        _workerLoad(data: any): void;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    toLine(lineString: maptalks.LineString, options: Object, material: THREE.LineMaterial): {
        [x: string]: any;
        type: string;
        _workerLoad(result: any): void;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    toExtrudeLine(lineString: maptalks.LineString, options: Object, material: THREE.Material): {
        [x: string]: any;
        type: string;
        _workerLoad(result: any): void;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    toModel(model: THREE.Mesh | THREE.Group, options: Object): {
        [x: string]: any;
        type: string;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    toExtrudeLineTrail(lineString: maptalks.LineString, options: any, material: THREE.Material): {
        [x: string]: any;
        _params: {
            index: number;
            chunkLines: any[][];
            geometries: never[];
            layer: any;
            trail: number;
            lineWidth: any;
            depth: any;
            speed: number;
            idx: number;
            loaded: boolean;
            center: any;
            centerPt: any;
            workerInitCount: number;
        };
        type: string;
        _init(params: any): void;
        _animation(): void;
        _workerLoad(result: any): any | undefined;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    toExtrudePolygons(polygons: any, options: any, material: any): {
        [x: string]: any;
        _baseObjects: any[];
        _datas: any;
        _geometriesAttributes: {
            position: {
                middleZ: number;
                count: number;
                start: number;
                end: number;
            };
            hide: boolean;
        }[];
        faceIndex: any;
        _geometryCache: any;
        isHide: boolean;
        _colorMap: {};
        type: string;
        getSelectMesh(): {
            data: any;
            baseObject: any;
        } | undefined;
        identify(coordinate: any): any;
        _workerLoad(result: any): void;
        _initBaseObjectsEvent(baseObjects: any): any;
        _proxyEvent(baseObject: any): void;
        _mouseover: boolean | undefined;
        _getHideGeometryIndex(attribute: any): {
            indexs: number[];
            count: number;
        };
        _updateAttribute(bufferAttribute: any, attribute: any): any;
        _showGeometry(baseObject: any, isHide: any): any;
        _getIndex(faceIndex: any): any;
        _init(): void;
        _setPickObject3d(): void;
    };
    toPoint(coordinate: maptalks.Coordinate, options: any, material: any): {
        [x: string]: any;
        type: string;
        identify(coordinate: maptalks.Coordinate): boolean;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    toPoints(points: any[], options: any, material: any): {
        [x: string]: any;
        _baseObjects: any[];
        _datas: any;
        faceIndex: any;
        _geometriesAttributes: {
            position: {
                count: number;
                start: number;
                end: number;
            };
            hide: boolean;
        }[];
        _geometryCache: any;
        isHide: boolean;
        _grids: {
            minlng: any;
            minlat: any;
            maxlng: any;
            maxlat: any;
            minx: number;
            miny: number;
            maxx: number;
            maxy: number;
            coordinates: any[];
            positions: any[];
            indexs: any[];
            key: any;
            updateBBoxPixel(map: any): any;
            containsCoordinate(c: any): boolean;
            isRecCross(pixel: any, size: any): boolean;
        }[];
        type: string;
        maxSize: number;
        _bindMapEvents(): void;
        _updateGrids(): void;
        getSelectMesh(): {
            data: any;
            baseObject: any;
        } | undefined;
        identify(coordinate: maptalks.Coordinate): boolean;
        _initBaseObjectsEvent(baseObjects: any): any;
        _proxyEvent(baseObject: any): void;
        _mouseover: boolean | undefined;
        _getHideGeometryIndex(attribute: any): {
            indexs: number[];
            count: number;
        };
        _updateAttribute(bufferAttribute: any, attribute: any): any;
        _showGeometry(baseObject: any, isHide: any): any;
        _getIndex(faceIndex: any): any;
        _init(): void;
        _setPickObject3d(): void;
    };
    toBars(points: any[], options: any, material: any): {
        [x: string]: any;
        _baseObjects: {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }[];
        _datas: any;
        _geometriesAttributes: {
            position: {
                count: any;
                start: number;
                end: number;
            };
            hide: boolean;
        }[];
        faceIndex: any;
        _geometryCache: any;
        isHide: boolean;
        _colorMap: {};
        type: string;
        identify(): any;
        getSelectMesh(): {
            data: any;
            baseObject: {
                [x: string]: any;
                type: string;
                _workerLoad(data: any): void;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            };
        } | undefined;
        _workerLoad(result: any): void;
        _initBaseObjectsEvent(baseObjects: any): any;
        _proxyEvent(baseObject: any): void;
        _mouseover: boolean | undefined;
        _getHideGeometryIndex(attribute: any): {
            indexs: number[];
            count: number;
        };
        _updateAttribute(bufferAttribute: any, attribute: any): any;
        _showGeometry(baseObject: any, isHide: any): any;
        _getIndex(faceIndex: any): any;
        _init(): void;
        _setPickObject3d(): void;
    };
    toExtrudeLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
        [x: string]: any;
        _baseObjects: any[];
        _datas: any;
        _geometriesAttributes: {
            position: {
                middleZ: number;
                count: number;
                start: number;
                end: number;
            };
            hide: boolean;
        }[];
        faceIndex: any;
        _geometryCache: any;
        isHide: boolean;
        _colorMap: {};
        type: string;
        getSelectMesh(): {
            data: any;
            baseObject: any;
        } | undefined;
        identify(coordinate: any): any;
        _workerLoad(result: any): void;
        _initBaseObjectsEvent(baseObjects: any): any;
        _proxyEvent(baseObject: any): void;
        _mouseover: boolean | undefined;
        _getHideGeometryIndex(attribute: any): {
            indexs: number[];
            count: number;
        };
        _updateAttribute(bufferAttribute: any, attribute: any): any;
        _showGeometry(baseObject: any, isHide: any): any;
        _getIndex(faceIndex: any): any;
        _init(): void;
        _setPickObject3d(): void;
    };
    toLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
        [x: string]: any;
        _baseObjects: any[];
        _datas: any;
        _geometriesAttributes: {
            position: {
                count: number;
                start: number;
                end: number;
            };
            hide: boolean;
        }[];
        faceIndex: any;
        index: any;
        _geometryCache: any;
        isHide: boolean;
        _colorMap: {};
        type: string;
        getSelectMesh(): {
            data: any;
            baseObject: any;
        } | undefined;
        _setPickObject3d(): void;
        identify(coordinate: any): any;
        _workerLoad(result: any): void;
        _initBaseObjectsEvent(baseObjects: any): any;
        _proxyEvent(baseObject: any): void;
        _mouseover: boolean | undefined;
        _getHideGeometryIndex(attribute: any): {
            indexs: number[];
            count: number;
        };
        _updateAttribute(bufferAttribute: any, attribute: any): any;
        _showGeometry(baseObject: any, isHide: any): any;
        _getIndex(faceIndex: any): any;
        _init(): void;
    };
    toThreeVectorTileLayer(url: any, options: any, getMaterial: any): {
        [x: string]: any;
        _opts: {};
        _layer: any;
        getMaterial: any;
        _baseObjectKeys: {};
        _loadTiles: {};
        _add: any;
        _layerLaodTime: number;
        formatBaseObjects(index: any, json: any): any[];
        loopMessage(q: any): void;
        _init(): void;
        intervalId: NodeJS.Timer | undefined;
        _getMaterial(layerName: any, data: any, index: any, geojson: any): any;
        material: any;
        isAsynchronous(): any;
        getBaseObjects(): any[];
        onSelectMesh(type: any, e: any): void;
        getTileData(q: any): void;
        _getCurentTileKeys(): {
            keys: any[];
            keysMap: {};
        };
        _isLoad(): boolean;
        _layerOnLoad(): void;
        _workerLoad(e: any): void;
        _generateBaseObjects(index: any, res: any, img: any): void;
        _diffCache(): void;
        _diposeBaseObject(index: any): void;
        _cachetile(index: any, baseobject: any): void;
        _getXYZOfIndex(index: any): {
            x: number;
            y: number;
            z: number;
        };
        _getTileExtent(x: any, y: any, z: any): any;
        _getTileLngLatExtent(x: any, y: any, z: any): any;
    };
    toTerrain(extent: any, options: any, material: any): {
        [x: string]: any;
        type: string;
        updateData(image: any): any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    toTerrainVectorTileLayer(url: any, options: any, material: any): {
        [x: string]: any;
        _opts: {};
        _layer: any;
        material: any;
        _baseObjectKeys: {};
        _loadTiles: {};
        _add: any;
        _imgQueue: {};
        _layerLaodTime: number;
        isAsynchronous(): boolean;
        formatBaseObjects(index: any, image: any): {
            [x: string]: any;
            type: string;
            updateData(image: any): any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }[];
        loopMessage(q: any): void;
        _init(): void;
        intervalId: NodeJS.Timer | undefined;
        getMaterial: any;
        getBaseObjects(): any[];
        onSelectMesh(type: any, e: any): void;
        getTileData(q: any): void;
        _getCurentTileKeys(): {
            keys: any[];
            keysMap: {};
        };
        _isLoad(): boolean;
        _layerOnLoad(): void;
        _workerLoad(e: any): void;
        _generateBaseObjects(index: any, res: any, img: any): void;
        _diffCache(): void;
        _diposeBaseObject(index: any): void;
        _cachetile(index: any, baseobject: any): void;
        _getXYZOfIndex(index: any): {
            x: number;
            y: number;
            z: number;
        };
        _getTileExtent(x: any, y: any, z: any): any;
        _getTileLngLatExtent(x: any, y: any, z: any): any;
    };
    toHeatMap(data: any, options: any, material: any): {
        [x: string]: any;
        type: string;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    toFatLine(lineString: any, options: any, material: any): {
        [x: string]: any;
        type: string;
        _init(): void;
        _setMaterialRes(layer: any, material: any): void;
        _setPickObject3d(ps: any, linewidth: any): void;
        identify(coordinate: any): boolean;
        setSymbol(material: any): any;
        _workerLoad(result: any): void;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    toFatLines(lineStrings: any, options: any, material: any): {
        [x: string]: any;
        _baseObjects: any[];
        _datas: any;
        _geometriesAttributes: {
            position: {
                count: number;
                start: number;
                end: number;
            };
            instanceStart: {
                count: number;
                start: number;
                end: number;
            };
            instanceEnd: {
                count: number;
                start: number;
                end: number;
            };
            hide: boolean;
        }[];
        faceIndex: any;
        index: any;
        _geometryCache: {
            [x: string]: any;
            isLineGeometry: boolean;
            type: string;
            fromLine(line: any): any;
            isLineSegmentsGeometry: boolean;
            applyMatrix(matrix: any): any;
            setPositions(array: any): any;
            setColors(array: any): any;
            fromWireframeGeometry(geometry: any): any;
            fromEdgesGeometry(geometry: any): any;
            fromMesh(mesh: any): any;
            fromLineSegements(lineSegments: any): any;
            computeBoundingBox(): void;
            boundingBox: any;
            computeBoundingSphere(): void;
            boundingSphere: any;
            toJSON(): void;
            copy(source: any): any;
        };
        _colorMap: {};
        isHide: boolean;
        type: string;
        _setMaterialRes(layer: any, material: any): void;
        _setPickObject3d(ps: any, linewidth: any): void;
        identify(coordinate: any): any;
        setSymbol(material: any): any;
        getSelectMesh(): {
            data: any;
            baseObject: any;
        } | undefined;
        _updateAttribute(bufferAttribute: any, attribute: any): any;
        _showGeometry(baseObject: any, isHide: any): any;
        _workerLoad(result: any): void;
        _initBaseObjectsEvent(baseObjects: any): any;
        _proxyEvent(baseObject: any): void;
        _mouseover: boolean | undefined;
        _getHideGeometryIndex(attribute: any): {
            indexs: number[];
            count: number;
        };
        _getIndex(faceIndex: any): any;
        _init(): void;
    };
    toBox(coorindate: any, options: any, material: any): {
        [x: string]: any;
        type: string;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    };
    toBoxs(points: any, options: any, material: any): {
        [x: string]: any;
        _baseObjects: {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }[];
        _datas: any;
        _geometriesAttributes: {
            position: {
                count: any;
                start: number;
                end: number;
            };
            hide: boolean;
        }[];
        faceIndex: any;
        _geometryCache: any;
        isHide: boolean;
        _colorMap: {};
        type: string;
        identify(coordinate: any): any;
        _initBaseObjectsEvent(baseObjects: any): any;
        _proxyEvent(baseObject: any): void;
        _mouseover: boolean | undefined;
        _getHideGeometryIndex(attribute: any): {
            indexs: number[];
            count: number;
        };
        _updateAttribute(bufferAttribute: any, attribute: any): any;
        _showGeometry(baseObject: any, isHide: any): any;
        getSelectMesh(): {
            data: any;
            baseObject: any;
        } | undefined;
        _getIndex(faceIndex: any): any;
        _init(): void;
        _setPickObject3d(): void;
    };
    getBaseObjects(): any[];
    getMeshes(): any[];
    clear(): {
        [x: string]: any;
        _animationBaseObjectMap: {};
        _needsUpdate: boolean;
        _mousemoveTimeOut: number;
        _mousedownTime: number;
        _baseObjects: any[];
        _delayMeshes: any[];
        type: string;
        isMercator(): boolean;
        isRendering(): any;
        prepareToDraw(...args: any[]): void;
        draw(gl: any, view: any, scene: any, camera: any, timeStamp: any, context: any): void;
        drawOnInteracting(gl: any, view: any, scene: any, camera: any, event: any, timeStamp: any, context: any): void;
        coordinateToVector3(coordinate: maptalks.Coordinate, z?: number | undefined, out: any): THREE.Vector3;
        coordinatiesToGLFloatArray(coordinaties: any, centerPt: any): {
            positions: Float32Array;
            positons2d: Float32Array;
        } | null;
        coordinatiesToGLArray(coordinaties: any, centerPt: any): any[] | null;
        distanceToVector3(w: number, h: number, coord: any): THREE.Vector3;
        altitudeToVector3(altitude: any, altitude1: any, coord: any, out: any): any;
        toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape;
        toExtrudeMesh(polygon: any, altitude: any, material: any, height: any): any;
        toExtrudePolygon(polygon: maptalks.Polygon | maptalks.MultiPolygon, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBar(coordinate: maptalks.Coordinate, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toLine(lineString: maptalks.LineString, options: Object, material: THREE.LineMaterial): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLine(lineString: maptalks.LineString, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toModel(model: THREE.Mesh | THREE.Group, options: Object): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLineTrail(lineString: maptalks.LineString, options: any, material: THREE.Material): {
            [x: string]: any;
            _params: {
                index: number;
                chunkLines: any[][];
                geometries: never[];
                layer: any;
                trail: number;
                lineWidth: any;
                depth: any;
                speed: number;
                idx: number;
                loaded: boolean;
                center: any;
                centerPt: any;
                workerInitCount: number;
            };
            type: string;
            _init(params: any): void;
            _animation(): void;
            _workerLoad(result: any): any | undefined;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudePolygons(polygons: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toPoint(coordinate: maptalks.Coordinate, options: any, material: any): {
            [x: string]: any;
            type: string;
            identify(coordinate: maptalks.Coordinate): boolean;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toPoints(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            faceIndex: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            _geometryCache: any;
            isHide: boolean;
            _grids: {
                minlng: any;
                minlat: any;
                maxlng: any;
                maxlat: any;
                minx: number;
                miny: number;
                maxx: number;
                maxy: number;
                coordinates: any[];
                positions: any[];
                indexs: any[];
                key: any;
                updateBBoxPixel(map: any): any;
                containsCoordinate(c: any): boolean;
                isRecCross(pixel: any, size: any): boolean;
            }[];
            type: string;
            maxSize: number;
            _bindMapEvents(): void;
            _updateGrids(): void;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: maptalks.Coordinate): boolean;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toBars(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                _workerLoad(data: any): void;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(): any;
            getSelectMesh(): {
                data: any;
                baseObject: {
                    [x: string]: any;
                    type: string;
                    _workerLoad(data: any): void;
                    isAdd: boolean;
                    _mouseover: boolean;
                    _visible: boolean;
                    _zoomVisible: boolean;
                    picked: boolean;
                    isBaseObject: boolean;
                    id: any;
                    addTo(layer: any): any;
                    remove(): any;
                    getObject3d(): any;
                    getId(): any;
                    setId(id: any): any;
                    getType(): any;
                    getOptions(): any;
                    getProperties(): any;
                    setProperties(property: any): any;
                    getLayer(): any;
                    getMap(): any;
                    getCenter(): any;
                    getAltitude(): any;
                    setAltitude(altitude: any): any;
                    supportHeight(): any;
                    getHeight(): any;
                    setHeight(height: any): any;
                    show(): any;
                    hide(): any;
                    isVisible(): boolean;
                    getSymbol(): any;
                    setSymbol(material: any): any;
                    setInfoWindow(options: any): any;
                    infoWindow: any;
                    getInfoWindow(): any;
                    openInfoWindow(coordinate: any): any;
                    closeInfoWindow(): any;
                    removeInfoWindow(): any;
                    setToolTip(content: any, options: any): any;
                    toolTip: any;
                    getToolTip(): any;
                    openToolTip(coordinate: any): any;
                    closeToolTip(): any;
                    removeToolTip(): any;
                    _hideUI(): any;
                    animateShow(options: any, cb: any): any;
                    _showPlayer: any;
                    getMinZoom(): any;
                    getMaxZoom(): any;
                    isAsynchronous(): any;
                    readonly bloom: any;
                    fire(eventType: any, param: any): any;
                    config(): any;
                    setPickObject3d(object3d: any): any;
                    pickObject3d: any;
                    _initOptions(options: any): any;
                    options: any;
                    _createMesh(geometry: any, material: any): any;
                    object3d: any;
                    _createInstancedMesh(geometry: any, material: any, count: any): any;
                    _createGroup(): any;
                    _createLine(geometry: any, material: any): any;
                    _createLine2(geometry: any, material: any): any;
                    _createPoints(geometry: any, material: any): any;
                    _createLineSegments(geometry: any, material: any): any;
                    _computeLineDistances(geometry: any): void;
                };
            } | undefined;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toExtrudeLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _setPickObject3d(): void;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toThreeVectorTileLayer(url: any, options: any, getMaterial: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            getMaterial: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _layerLaodTime: number;
            formatBaseObjects(index: any, json: any): any[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            _getMaterial(layerName: any, data: any, index: any, geojson: any): any;
            material: any;
            isAsynchronous(): any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toTerrain(extent: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            updateData(image: any): any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toTerrainVectorTileLayer(url: any, options: any, material: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            material: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _imgQueue: {};
            _layerLaodTime: number;
            isAsynchronous(): boolean;
            formatBaseObjects(index: any, image: any): {
                [x: string]: any;
                type: string;
                updateData(image: any): any;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            getMaterial: any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toHeatMap(data: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLine(lineString: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            _init(): void;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): boolean;
            setSymbol(material: any): any;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLines(lineStrings: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceStart: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceEnd: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: {
                [x: string]: any;
                isLineGeometry: boolean;
                type: string;
                fromLine(line: any): any;
                isLineSegmentsGeometry: boolean;
                applyMatrix(matrix: any): any;
                setPositions(array: any): any;
                setColors(array: any): any;
                fromWireframeGeometry(geometry: any): any;
                fromEdgesGeometry(geometry: any): any;
                fromMesh(mesh: any): any;
                fromLineSegements(lineSegments: any): any;
                computeBoundingBox(): void;
                boundingBox: any;
                computeBoundingSphere(): void;
                boundingSphere: any;
                toJSON(): void;
                copy(source: any): any;
            };
            _colorMap: {};
            isHide: boolean;
            type: string;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): any;
            setSymbol(material: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toBox(coorindate: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBoxs(points: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(coordinate: any): any;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        getBaseObjects(): any[];
        getMeshes(): any[];
        clear(): any;
        clearMesh(): any;
        lookAt(vector: any): any;
        getCamera(): any;
        getScene(): any;
        renderScene(context: any, layer: any): any;
        loop(render?: boolean): void;
        renderPickScene(): any;
        getThreeRenderer(): any;
        getPick(): any;
        delayAddMesh(meshes: any): any;
        addMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        removeMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        _initRaycaster(): any;
        _raycaster: any;
        _mouse: any;
        getRaycaster(): any;
        identify(coordinate: Coordinate, options: Object): any[];
        _containerPoint: any;
        _recursionMesh(mesh: any): any;
        _getLinePrecision(res?: number): number;
        _identifyBaseObjectEvents(event: any): any;
        _getEventParams(e: any): {
            domEvent: any;
        };
        _zoomend(): void;
        _getGeometryEventMapPanel(): any;
        onAdd(): any;
        _identifyBaseObjectEventsThis: ((event: any) => any) | undefined;
        _zoomendThis: (() => void) | undefined;
        onRemove(): any;
        _callbackBaseObjectAnimation(): any;
        _getFovRatio(): number;
    };
    clearMesh(): {
        [x: string]: any;
        _animationBaseObjectMap: {};
        _needsUpdate: boolean;
        _mousemoveTimeOut: number;
        _mousedownTime: number;
        _baseObjects: any[];
        _delayMeshes: any[];
        type: string;
        isMercator(): boolean;
        isRendering(): any;
        prepareToDraw(...args: any[]): void;
        draw(gl: any, view: any, scene: any, camera: any, timeStamp: any, context: any): void;
        drawOnInteracting(gl: any, view: any, scene: any, camera: any, event: any, timeStamp: any, context: any): void;
        coordinateToVector3(coordinate: maptalks.Coordinate, z?: number | undefined, out: any): THREE.Vector3;
        coordinatiesToGLFloatArray(coordinaties: any, centerPt: any): {
            positions: Float32Array;
            positons2d: Float32Array;
        } | null;
        coordinatiesToGLArray(coordinaties: any, centerPt: any): any[] | null;
        distanceToVector3(w: number, h: number, coord: any): THREE.Vector3;
        altitudeToVector3(altitude: any, altitude1: any, coord: any, out: any): any;
        toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape;
        toExtrudeMesh(polygon: any, altitude: any, material: any, height: any): any;
        toExtrudePolygon(polygon: maptalks.Polygon | maptalks.MultiPolygon, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBar(coordinate: maptalks.Coordinate, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toLine(lineString: maptalks.LineString, options: Object, material: THREE.LineMaterial): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLine(lineString: maptalks.LineString, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toModel(model: THREE.Mesh | THREE.Group, options: Object): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLineTrail(lineString: maptalks.LineString, options: any, material: THREE.Material): {
            [x: string]: any;
            _params: {
                index: number;
                chunkLines: any[][];
                geometries: never[];
                layer: any;
                trail: number;
                lineWidth: any;
                depth: any;
                speed: number;
                idx: number;
                loaded: boolean;
                center: any;
                centerPt: any;
                workerInitCount: number;
            };
            type: string;
            _init(params: any): void;
            _animation(): void;
            _workerLoad(result: any): any | undefined;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudePolygons(polygons: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toPoint(coordinate: maptalks.Coordinate, options: any, material: any): {
            [x: string]: any;
            type: string;
            identify(coordinate: maptalks.Coordinate): boolean;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toPoints(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            faceIndex: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            _geometryCache: any;
            isHide: boolean;
            _grids: {
                minlng: any;
                minlat: any;
                maxlng: any;
                maxlat: any;
                minx: number;
                miny: number;
                maxx: number;
                maxy: number;
                coordinates: any[];
                positions: any[];
                indexs: any[];
                key: any;
                updateBBoxPixel(map: any): any;
                containsCoordinate(c: any): boolean;
                isRecCross(pixel: any, size: any): boolean;
            }[];
            type: string;
            maxSize: number;
            _bindMapEvents(): void;
            _updateGrids(): void;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: maptalks.Coordinate): boolean;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toBars(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                _workerLoad(data: any): void;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(): any;
            getSelectMesh(): {
                data: any;
                baseObject: {
                    [x: string]: any;
                    type: string;
                    _workerLoad(data: any): void;
                    isAdd: boolean;
                    _mouseover: boolean;
                    _visible: boolean;
                    _zoomVisible: boolean;
                    picked: boolean;
                    isBaseObject: boolean;
                    id: any;
                    addTo(layer: any): any;
                    remove(): any;
                    getObject3d(): any;
                    getId(): any;
                    setId(id: any): any;
                    getType(): any;
                    getOptions(): any;
                    getProperties(): any;
                    setProperties(property: any): any;
                    getLayer(): any;
                    getMap(): any;
                    getCenter(): any;
                    getAltitude(): any;
                    setAltitude(altitude: any): any;
                    supportHeight(): any;
                    getHeight(): any;
                    setHeight(height: any): any;
                    show(): any;
                    hide(): any;
                    isVisible(): boolean;
                    getSymbol(): any;
                    setSymbol(material: any): any;
                    setInfoWindow(options: any): any;
                    infoWindow: any;
                    getInfoWindow(): any;
                    openInfoWindow(coordinate: any): any;
                    closeInfoWindow(): any;
                    removeInfoWindow(): any;
                    setToolTip(content: any, options: any): any;
                    toolTip: any;
                    getToolTip(): any;
                    openToolTip(coordinate: any): any;
                    closeToolTip(): any;
                    removeToolTip(): any;
                    _hideUI(): any;
                    animateShow(options: any, cb: any): any;
                    _showPlayer: any;
                    getMinZoom(): any;
                    getMaxZoom(): any;
                    isAsynchronous(): any;
                    readonly bloom: any;
                    fire(eventType: any, param: any): any;
                    config(): any;
                    setPickObject3d(object3d: any): any;
                    pickObject3d: any;
                    _initOptions(options: any): any;
                    options: any;
                    _createMesh(geometry: any, material: any): any;
                    object3d: any;
                    _createInstancedMesh(geometry: any, material: any, count: any): any;
                    _createGroup(): any;
                    _createLine(geometry: any, material: any): any;
                    _createLine2(geometry: any, material: any): any;
                    _createPoints(geometry: any, material: any): any;
                    _createLineSegments(geometry: any, material: any): any;
                    _computeLineDistances(geometry: any): void;
                };
            } | undefined;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toExtrudeLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _setPickObject3d(): void;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toThreeVectorTileLayer(url: any, options: any, getMaterial: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            getMaterial: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _layerLaodTime: number;
            formatBaseObjects(index: any, json: any): any[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            _getMaterial(layerName: any, data: any, index: any, geojson: any): any;
            material: any;
            isAsynchronous(): any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toTerrain(extent: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            updateData(image: any): any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toTerrainVectorTileLayer(url: any, options: any, material: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            material: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _imgQueue: {};
            _layerLaodTime: number;
            isAsynchronous(): boolean;
            formatBaseObjects(index: any, image: any): {
                [x: string]: any;
                type: string;
                updateData(image: any): any;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            getMaterial: any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toHeatMap(data: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLine(lineString: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            _init(): void;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): boolean;
            setSymbol(material: any): any;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLines(lineStrings: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceStart: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceEnd: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: {
                [x: string]: any;
                isLineGeometry: boolean;
                type: string;
                fromLine(line: any): any;
                isLineSegmentsGeometry: boolean;
                applyMatrix(matrix: any): any;
                setPositions(array: any): any;
                setColors(array: any): any;
                fromWireframeGeometry(geometry: any): any;
                fromEdgesGeometry(geometry: any): any;
                fromMesh(mesh: any): any;
                fromLineSegements(lineSegments: any): any;
                computeBoundingBox(): void;
                boundingBox: any;
                computeBoundingSphere(): void;
                boundingSphere: any;
                toJSON(): void;
                copy(source: any): any;
            };
            _colorMap: {};
            isHide: boolean;
            type: string;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): any;
            setSymbol(material: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toBox(coorindate: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBoxs(points: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(coordinate: any): any;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        getBaseObjects(): any[];
        getMeshes(): any[];
        clear(): any;
        clearMesh(): any;
        lookAt(vector: any): any;
        getCamera(): any;
        getScene(): any;
        renderScene(context: any, layer: any): any;
        loop(render?: boolean): void;
        renderPickScene(): any;
        getThreeRenderer(): any;
        getPick(): any;
        delayAddMesh(meshes: any): any;
        addMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        removeMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        _initRaycaster(): any;
        _raycaster: any;
        _mouse: any;
        getRaycaster(): any;
        identify(coordinate: Coordinate, options: Object): any[];
        _containerPoint: any;
        _recursionMesh(mesh: any): any;
        _getLinePrecision(res?: number): number;
        _identifyBaseObjectEvents(event: any): any;
        _getEventParams(e: any): {
            domEvent: any;
        };
        _zoomend(): void;
        _getGeometryEventMapPanel(): any;
        onAdd(): any;
        _identifyBaseObjectEventsThis: ((event: any) => any) | undefined;
        _zoomendThis: (() => void) | undefined;
        onRemove(): any;
        _callbackBaseObjectAnimation(): any;
        _getFovRatio(): number;
    };
    lookAt(vector: any): {
        [x: string]: any;
        _animationBaseObjectMap: {};
        _needsUpdate: boolean;
        _mousemoveTimeOut: number;
        _mousedownTime: number;
        _baseObjects: any[];
        _delayMeshes: any[];
        type: string;
        isMercator(): boolean;
        isRendering(): any;
        prepareToDraw(...args: any[]): void;
        draw(gl: any, view: any, scene: any, camera: any, timeStamp: any, context: any): void;
        drawOnInteracting(gl: any, view: any, scene: any, camera: any, event: any, timeStamp: any, context: any): void;
        coordinateToVector3(coordinate: maptalks.Coordinate, z?: number | undefined, out: any): THREE.Vector3;
        coordinatiesToGLFloatArray(coordinaties: any, centerPt: any): {
            positions: Float32Array;
            positons2d: Float32Array;
        } | null;
        coordinatiesToGLArray(coordinaties: any, centerPt: any): any[] | null;
        distanceToVector3(w: number, h: number, coord: any): THREE.Vector3;
        altitudeToVector3(altitude: any, altitude1: any, coord: any, out: any): any;
        toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape;
        toExtrudeMesh(polygon: any, altitude: any, material: any, height: any): any;
        toExtrudePolygon(polygon: maptalks.Polygon | maptalks.MultiPolygon, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBar(coordinate: maptalks.Coordinate, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toLine(lineString: maptalks.LineString, options: Object, material: THREE.LineMaterial): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLine(lineString: maptalks.LineString, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toModel(model: THREE.Mesh | THREE.Group, options: Object): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLineTrail(lineString: maptalks.LineString, options: any, material: THREE.Material): {
            [x: string]: any;
            _params: {
                index: number;
                chunkLines: any[][];
                geometries: never[];
                layer: any;
                trail: number;
                lineWidth: any;
                depth: any;
                speed: number;
                idx: number;
                loaded: boolean;
                center: any;
                centerPt: any;
                workerInitCount: number;
            };
            type: string;
            _init(params: any): void;
            _animation(): void;
            _workerLoad(result: any): any | undefined;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudePolygons(polygons: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toPoint(coordinate: maptalks.Coordinate, options: any, material: any): {
            [x: string]: any;
            type: string;
            identify(coordinate: maptalks.Coordinate): boolean;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toPoints(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            faceIndex: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            _geometryCache: any;
            isHide: boolean;
            _grids: {
                minlng: any;
                minlat: any;
                maxlng: any;
                maxlat: any;
                minx: number;
                miny: number;
                maxx: number;
                maxy: number;
                coordinates: any[];
                positions: any[];
                indexs: any[];
                key: any;
                updateBBoxPixel(map: any): any;
                containsCoordinate(c: any): boolean;
                isRecCross(pixel: any, size: any): boolean;
            }[];
            type: string;
            maxSize: number;
            _bindMapEvents(): void;
            _updateGrids(): void;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: maptalks.Coordinate): boolean;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toBars(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                _workerLoad(data: any): void;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(): any;
            getSelectMesh(): {
                data: any;
                baseObject: {
                    [x: string]: any;
                    type: string;
                    _workerLoad(data: any): void;
                    isAdd: boolean;
                    _mouseover: boolean;
                    _visible: boolean;
                    _zoomVisible: boolean;
                    picked: boolean;
                    isBaseObject: boolean;
                    id: any;
                    addTo(layer: any): any;
                    remove(): any;
                    getObject3d(): any;
                    getId(): any;
                    setId(id: any): any;
                    getType(): any;
                    getOptions(): any;
                    getProperties(): any;
                    setProperties(property: any): any;
                    getLayer(): any;
                    getMap(): any;
                    getCenter(): any;
                    getAltitude(): any;
                    setAltitude(altitude: any): any;
                    supportHeight(): any;
                    getHeight(): any;
                    setHeight(height: any): any;
                    show(): any;
                    hide(): any;
                    isVisible(): boolean;
                    getSymbol(): any;
                    setSymbol(material: any): any;
                    setInfoWindow(options: any): any;
                    infoWindow: any;
                    getInfoWindow(): any;
                    openInfoWindow(coordinate: any): any;
                    closeInfoWindow(): any;
                    removeInfoWindow(): any;
                    setToolTip(content: any, options: any): any;
                    toolTip: any;
                    getToolTip(): any;
                    openToolTip(coordinate: any): any;
                    closeToolTip(): any;
                    removeToolTip(): any;
                    _hideUI(): any;
                    animateShow(options: any, cb: any): any;
                    _showPlayer: any;
                    getMinZoom(): any;
                    getMaxZoom(): any;
                    isAsynchronous(): any;
                    readonly bloom: any;
                    fire(eventType: any, param: any): any;
                    config(): any;
                    setPickObject3d(object3d: any): any;
                    pickObject3d: any;
                    _initOptions(options: any): any;
                    options: any;
                    _createMesh(geometry: any, material: any): any;
                    object3d: any;
                    _createInstancedMesh(geometry: any, material: any, count: any): any;
                    _createGroup(): any;
                    _createLine(geometry: any, material: any): any;
                    _createLine2(geometry: any, material: any): any;
                    _createPoints(geometry: any, material: any): any;
                    _createLineSegments(geometry: any, material: any): any;
                    _computeLineDistances(geometry: any): void;
                };
            } | undefined;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toExtrudeLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _setPickObject3d(): void;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toThreeVectorTileLayer(url: any, options: any, getMaterial: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            getMaterial: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _layerLaodTime: number;
            formatBaseObjects(index: any, json: any): any[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            _getMaterial(layerName: any, data: any, index: any, geojson: any): any;
            material: any;
            isAsynchronous(): any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toTerrain(extent: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            updateData(image: any): any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toTerrainVectorTileLayer(url: any, options: any, material: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            material: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _imgQueue: {};
            _layerLaodTime: number;
            isAsynchronous(): boolean;
            formatBaseObjects(index: any, image: any): {
                [x: string]: any;
                type: string;
                updateData(image: any): any;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            getMaterial: any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toHeatMap(data: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLine(lineString: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            _init(): void;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): boolean;
            setSymbol(material: any): any;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLines(lineStrings: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceStart: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceEnd: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: {
                [x: string]: any;
                isLineGeometry: boolean;
                type: string;
                fromLine(line: any): any;
                isLineSegmentsGeometry: boolean;
                applyMatrix(matrix: any): any;
                setPositions(array: any): any;
                setColors(array: any): any;
                fromWireframeGeometry(geometry: any): any;
                fromEdgesGeometry(geometry: any): any;
                fromMesh(mesh: any): any;
                fromLineSegements(lineSegments: any): any;
                computeBoundingBox(): void;
                boundingBox: any;
                computeBoundingSphere(): void;
                boundingSphere: any;
                toJSON(): void;
                copy(source: any): any;
            };
            _colorMap: {};
            isHide: boolean;
            type: string;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): any;
            setSymbol(material: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toBox(coorindate: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBoxs(points: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(coordinate: any): any;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        getBaseObjects(): any[];
        getMeshes(): any[];
        clear(): any;
        clearMesh(): any;
        lookAt(vector: any): any;
        getCamera(): any;
        getScene(): any;
        renderScene(context: any, layer: any): any;
        loop(render?: boolean): void;
        renderPickScene(): any;
        getThreeRenderer(): any;
        getPick(): any;
        delayAddMesh(meshes: any): any;
        addMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        removeMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        _initRaycaster(): any;
        _raycaster: any;
        _mouse: any;
        getRaycaster(): any;
        identify(coordinate: Coordinate, options: Object): any[];
        _containerPoint: any;
        _recursionMesh(mesh: any): any;
        _getLinePrecision(res?: number): number;
        _identifyBaseObjectEvents(event: any): any;
        _getEventParams(e: any): {
            domEvent: any;
        };
        _zoomend(): void;
        _getGeometryEventMapPanel(): any;
        onAdd(): any;
        _identifyBaseObjectEventsThis: ((event: any) => any) | undefined;
        _zoomendThis: (() => void) | undefined;
        onRemove(): any;
        _callbackBaseObjectAnimation(): any;
        _getFovRatio(): number;
    };
    getCamera(): any;
    getScene(): any;
    renderScene(context: any, layer: any): {
        [x: string]: any;
        _animationBaseObjectMap: {};
        _needsUpdate: boolean;
        _mousemoveTimeOut: number;
        _mousedownTime: number;
        _baseObjects: any[];
        _delayMeshes: any[];
        type: string;
        isMercator(): boolean;
        isRendering(): any;
        prepareToDraw(...args: any[]): void;
        draw(gl: any, view: any, scene: any, camera: any, timeStamp: any, context: any): void;
        drawOnInteracting(gl: any, view: any, scene: any, camera: any, event: any, timeStamp: any, context: any): void;
        coordinateToVector3(coordinate: maptalks.Coordinate, z?: number | undefined, out: any): THREE.Vector3;
        coordinatiesToGLFloatArray(coordinaties: any, centerPt: any): {
            positions: Float32Array;
            positons2d: Float32Array;
        } | null;
        coordinatiesToGLArray(coordinaties: any, centerPt: any): any[] | null;
        distanceToVector3(w: number, h: number, coord: any): THREE.Vector3;
        altitudeToVector3(altitude: any, altitude1: any, coord: any, out: any): any;
        toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape;
        toExtrudeMesh(polygon: any, altitude: any, material: any, height: any): any;
        toExtrudePolygon(polygon: maptalks.Polygon | maptalks.MultiPolygon, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBar(coordinate: maptalks.Coordinate, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toLine(lineString: maptalks.LineString, options: Object, material: THREE.LineMaterial): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLine(lineString: maptalks.LineString, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toModel(model: THREE.Mesh | THREE.Group, options: Object): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLineTrail(lineString: maptalks.LineString, options: any, material: THREE.Material): {
            [x: string]: any;
            _params: {
                index: number;
                chunkLines: any[][];
                geometries: never[];
                layer: any;
                trail: number;
                lineWidth: any;
                depth: any;
                speed: number;
                idx: number;
                loaded: boolean;
                center: any;
                centerPt: any;
                workerInitCount: number;
            };
            type: string;
            _init(params: any): void;
            _animation(): void;
            _workerLoad(result: any): any | undefined;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudePolygons(polygons: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toPoint(coordinate: maptalks.Coordinate, options: any, material: any): {
            [x: string]: any;
            type: string;
            identify(coordinate: maptalks.Coordinate): boolean;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toPoints(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            faceIndex: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            _geometryCache: any;
            isHide: boolean;
            _grids: {
                minlng: any;
                minlat: any;
                maxlng: any;
                maxlat: any;
                minx: number;
                miny: number;
                maxx: number;
                maxy: number;
                coordinates: any[];
                positions: any[];
                indexs: any[];
                key: any;
                updateBBoxPixel(map: any): any;
                containsCoordinate(c: any): boolean;
                isRecCross(pixel: any, size: any): boolean;
            }[];
            type: string;
            maxSize: number;
            _bindMapEvents(): void;
            _updateGrids(): void;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: maptalks.Coordinate): boolean;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toBars(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                _workerLoad(data: any): void;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(): any;
            getSelectMesh(): {
                data: any;
                baseObject: {
                    [x: string]: any;
                    type: string;
                    _workerLoad(data: any): void;
                    isAdd: boolean;
                    _mouseover: boolean;
                    _visible: boolean;
                    _zoomVisible: boolean;
                    picked: boolean;
                    isBaseObject: boolean;
                    id: any;
                    addTo(layer: any): any;
                    remove(): any;
                    getObject3d(): any;
                    getId(): any;
                    setId(id: any): any;
                    getType(): any;
                    getOptions(): any;
                    getProperties(): any;
                    setProperties(property: any): any;
                    getLayer(): any;
                    getMap(): any;
                    getCenter(): any;
                    getAltitude(): any;
                    setAltitude(altitude: any): any;
                    supportHeight(): any;
                    getHeight(): any;
                    setHeight(height: any): any;
                    show(): any;
                    hide(): any;
                    isVisible(): boolean;
                    getSymbol(): any;
                    setSymbol(material: any): any;
                    setInfoWindow(options: any): any;
                    infoWindow: any;
                    getInfoWindow(): any;
                    openInfoWindow(coordinate: any): any;
                    closeInfoWindow(): any;
                    removeInfoWindow(): any;
                    setToolTip(content: any, options: any): any;
                    toolTip: any;
                    getToolTip(): any;
                    openToolTip(coordinate: any): any;
                    closeToolTip(): any;
                    removeToolTip(): any;
                    _hideUI(): any;
                    animateShow(options: any, cb: any): any;
                    _showPlayer: any;
                    getMinZoom(): any;
                    getMaxZoom(): any;
                    isAsynchronous(): any;
                    readonly bloom: any;
                    fire(eventType: any, param: any): any;
                    config(): any;
                    setPickObject3d(object3d: any): any;
                    pickObject3d: any;
                    _initOptions(options: any): any;
                    options: any;
                    _createMesh(geometry: any, material: any): any;
                    object3d: any;
                    _createInstancedMesh(geometry: any, material: any, count: any): any;
                    _createGroup(): any;
                    _createLine(geometry: any, material: any): any;
                    _createLine2(geometry: any, material: any): any;
                    _createPoints(geometry: any, material: any): any;
                    _createLineSegments(geometry: any, material: any): any;
                    _computeLineDistances(geometry: any): void;
                };
            } | undefined;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toExtrudeLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _setPickObject3d(): void;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toThreeVectorTileLayer(url: any, options: any, getMaterial: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            getMaterial: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _layerLaodTime: number;
            formatBaseObjects(index: any, json: any): any[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            _getMaterial(layerName: any, data: any, index: any, geojson: any): any;
            material: any;
            isAsynchronous(): any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toTerrain(extent: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            updateData(image: any): any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toTerrainVectorTileLayer(url: any, options: any, material: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            material: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _imgQueue: {};
            _layerLaodTime: number;
            isAsynchronous(): boolean;
            formatBaseObjects(index: any, image: any): {
                [x: string]: any;
                type: string;
                updateData(image: any): any;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            getMaterial: any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toHeatMap(data: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLine(lineString: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            _init(): void;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): boolean;
            setSymbol(material: any): any;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLines(lineStrings: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceStart: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceEnd: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: {
                [x: string]: any;
                isLineGeometry: boolean;
                type: string;
                fromLine(line: any): any;
                isLineSegmentsGeometry: boolean;
                applyMatrix(matrix: any): any;
                setPositions(array: any): any;
                setColors(array: any): any;
                fromWireframeGeometry(geometry: any): any;
                fromEdgesGeometry(geometry: any): any;
                fromMesh(mesh: any): any;
                fromLineSegements(lineSegments: any): any;
                computeBoundingBox(): void;
                boundingBox: any;
                computeBoundingSphere(): void;
                boundingSphere: any;
                toJSON(): void;
                copy(source: any): any;
            };
            _colorMap: {};
            isHide: boolean;
            type: string;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): any;
            setSymbol(material: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toBox(coorindate: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBoxs(points: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(coordinate: any): any;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        getBaseObjects(): any[];
        getMeshes(): any[];
        clear(): any;
        clearMesh(): any;
        lookAt(vector: any): any;
        getCamera(): any;
        getScene(): any;
        renderScene(context: any, layer: any): any;
        loop(render?: boolean): void;
        renderPickScene(): any;
        getThreeRenderer(): any;
        getPick(): any;
        delayAddMesh(meshes: any): any;
        addMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        removeMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        _initRaycaster(): any;
        _raycaster: any;
        _mouse: any;
        getRaycaster(): any;
        identify(coordinate: Coordinate, options: Object): any[];
        _containerPoint: any;
        _recursionMesh(mesh: any): any;
        _getLinePrecision(res?: number): number;
        _identifyBaseObjectEvents(event: any): any;
        _getEventParams(e: any): {
            domEvent: any;
        };
        _zoomend(): void;
        _getGeometryEventMapPanel(): any;
        onAdd(): any;
        _identifyBaseObjectEventsThis: ((event: any) => any) | undefined;
        _zoomendThis: (() => void) | undefined;
        onRemove(): any;
        _callbackBaseObjectAnimation(): any;
        _getFovRatio(): number;
    };
    loop(render?: boolean): void;
    renderPickScene(): {
        [x: string]: any;
        _animationBaseObjectMap: {};
        _needsUpdate: boolean;
        _mousemoveTimeOut: number;
        _mousedownTime: number;
        _baseObjects: any[];
        _delayMeshes: any[];
        type: string;
        isMercator(): boolean;
        isRendering(): any;
        prepareToDraw(...args: any[]): void;
        draw(gl: any, view: any, scene: any, camera: any, timeStamp: any, context: any): void;
        drawOnInteracting(gl: any, view: any, scene: any, camera: any, event: any, timeStamp: any, context: any): void;
        coordinateToVector3(coordinate: maptalks.Coordinate, z?: number | undefined, out: any): THREE.Vector3;
        coordinatiesToGLFloatArray(coordinaties: any, centerPt: any): {
            positions: Float32Array;
            positons2d: Float32Array;
        } | null;
        coordinatiesToGLArray(coordinaties: any, centerPt: any): any[] | null;
        distanceToVector3(w: number, h: number, coord: any): THREE.Vector3;
        altitudeToVector3(altitude: any, altitude1: any, coord: any, out: any): any;
        toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape;
        toExtrudeMesh(polygon: any, altitude: any, material: any, height: any): any;
        toExtrudePolygon(polygon: maptalks.Polygon | maptalks.MultiPolygon, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBar(coordinate: maptalks.Coordinate, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toLine(lineString: maptalks.LineString, options: Object, material: THREE.LineMaterial): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLine(lineString: maptalks.LineString, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toModel(model: THREE.Mesh | THREE.Group, options: Object): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLineTrail(lineString: maptalks.LineString, options: any, material: THREE.Material): {
            [x: string]: any;
            _params: {
                index: number;
                chunkLines: any[][];
                geometries: never[];
                layer: any;
                trail: number;
                lineWidth: any;
                depth: any;
                speed: number;
                idx: number;
                loaded: boolean;
                center: any;
                centerPt: any;
                workerInitCount: number;
            };
            type: string;
            _init(params: any): void;
            _animation(): void;
            _workerLoad(result: any): any | undefined;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudePolygons(polygons: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toPoint(coordinate: maptalks.Coordinate, options: any, material: any): {
            [x: string]: any;
            type: string;
            identify(coordinate: maptalks.Coordinate): boolean;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toPoints(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            faceIndex: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            _geometryCache: any;
            isHide: boolean;
            _grids: {
                minlng: any;
                minlat: any;
                maxlng: any;
                maxlat: any;
                minx: number;
                miny: number;
                maxx: number;
                maxy: number;
                coordinates: any[];
                positions: any[];
                indexs: any[];
                key: any;
                updateBBoxPixel(map: any): any;
                containsCoordinate(c: any): boolean;
                isRecCross(pixel: any, size: any): boolean;
            }[];
            type: string;
            maxSize: number;
            _bindMapEvents(): void;
            _updateGrids(): void;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: maptalks.Coordinate): boolean;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toBars(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                _workerLoad(data: any): void;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(): any;
            getSelectMesh(): {
                data: any;
                baseObject: {
                    [x: string]: any;
                    type: string;
                    _workerLoad(data: any): void;
                    isAdd: boolean;
                    _mouseover: boolean;
                    _visible: boolean;
                    _zoomVisible: boolean;
                    picked: boolean;
                    isBaseObject: boolean;
                    id: any;
                    addTo(layer: any): any;
                    remove(): any;
                    getObject3d(): any;
                    getId(): any;
                    setId(id: any): any;
                    getType(): any;
                    getOptions(): any;
                    getProperties(): any;
                    setProperties(property: any): any;
                    getLayer(): any;
                    getMap(): any;
                    getCenter(): any;
                    getAltitude(): any;
                    setAltitude(altitude: any): any;
                    supportHeight(): any;
                    getHeight(): any;
                    setHeight(height: any): any;
                    show(): any;
                    hide(): any;
                    isVisible(): boolean;
                    getSymbol(): any;
                    setSymbol(material: any): any;
                    setInfoWindow(options: any): any;
                    infoWindow: any;
                    getInfoWindow(): any;
                    openInfoWindow(coordinate: any): any;
                    closeInfoWindow(): any;
                    removeInfoWindow(): any;
                    setToolTip(content: any, options: any): any;
                    toolTip: any;
                    getToolTip(): any;
                    openToolTip(coordinate: any): any;
                    closeToolTip(): any;
                    removeToolTip(): any;
                    _hideUI(): any;
                    animateShow(options: any, cb: any): any;
                    _showPlayer: any;
                    getMinZoom(): any;
                    getMaxZoom(): any;
                    isAsynchronous(): any;
                    readonly bloom: any;
                    fire(eventType: any, param: any): any;
                    config(): any;
                    setPickObject3d(object3d: any): any;
                    pickObject3d: any;
                    _initOptions(options: any): any;
                    options: any;
                    _createMesh(geometry: any, material: any): any;
                    object3d: any;
                    _createInstancedMesh(geometry: any, material: any, count: any): any;
                    _createGroup(): any;
                    _createLine(geometry: any, material: any): any;
                    _createLine2(geometry: any, material: any): any;
                    _createPoints(geometry: any, material: any): any;
                    _createLineSegments(geometry: any, material: any): any;
                    _computeLineDistances(geometry: any): void;
                };
            } | undefined;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toExtrudeLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _setPickObject3d(): void;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toThreeVectorTileLayer(url: any, options: any, getMaterial: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            getMaterial: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _layerLaodTime: number;
            formatBaseObjects(index: any, json: any): any[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            _getMaterial(layerName: any, data: any, index: any, geojson: any): any;
            material: any;
            isAsynchronous(): any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toTerrain(extent: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            updateData(image: any): any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toTerrainVectorTileLayer(url: any, options: any, material: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            material: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _imgQueue: {};
            _layerLaodTime: number;
            isAsynchronous(): boolean;
            formatBaseObjects(index: any, image: any): {
                [x: string]: any;
                type: string;
                updateData(image: any): any;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            getMaterial: any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toHeatMap(data: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLine(lineString: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            _init(): void;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): boolean;
            setSymbol(material: any): any;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLines(lineStrings: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceStart: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceEnd: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: {
                [x: string]: any;
                isLineGeometry: boolean;
                type: string;
                fromLine(line: any): any;
                isLineSegmentsGeometry: boolean;
                applyMatrix(matrix: any): any;
                setPositions(array: any): any;
                setColors(array: any): any;
                fromWireframeGeometry(geometry: any): any;
                fromEdgesGeometry(geometry: any): any;
                fromMesh(mesh: any): any;
                fromLineSegements(lineSegments: any): any;
                computeBoundingBox(): void;
                boundingBox: any;
                computeBoundingSphere(): void;
                boundingSphere: any;
                toJSON(): void;
                copy(source: any): any;
            };
            _colorMap: {};
            isHide: boolean;
            type: string;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): any;
            setSymbol(material: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toBox(coorindate: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBoxs(points: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(coordinate: any): any;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        getBaseObjects(): any[];
        getMeshes(): any[];
        clear(): any;
        clearMesh(): any;
        lookAt(vector: any): any;
        getCamera(): any;
        getScene(): any;
        renderScene(context: any, layer: any): any;
        loop(render?: boolean): void;
        renderPickScene(): any;
        getThreeRenderer(): any;
        getPick(): any;
        delayAddMesh(meshes: any): any;
        addMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        removeMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        _initRaycaster(): any;
        _raycaster: any;
        _mouse: any;
        getRaycaster(): any;
        identify(coordinate: Coordinate, options: Object): any[];
        _containerPoint: any;
        _recursionMesh(mesh: any): any;
        _getLinePrecision(res?: number): number;
        _identifyBaseObjectEvents(event: any): any;
        _getEventParams(e: any): {
            domEvent: any;
        };
        _zoomend(): void;
        _getGeometryEventMapPanel(): any;
        onAdd(): any;
        _identifyBaseObjectEventsThis: ((event: any) => any) | undefined;
        _zoomendThis: (() => void) | undefined;
        onRemove(): any;
        _callbackBaseObjectAnimation(): any;
        _getFovRatio(): number;
    };
    getThreeRenderer(): any;
    getPick(): any;
    delayAddMesh(meshes: any): {
        [x: string]: any;
        _animationBaseObjectMap: {};
        _needsUpdate: boolean;
        _mousemoveTimeOut: number;
        _mousedownTime: number;
        _baseObjects: any[];
        _delayMeshes: any[];
        type: string;
        isMercator(): boolean;
        isRendering(): any;
        prepareToDraw(...args: any[]): void;
        draw(gl: any, view: any, scene: any, camera: any, timeStamp: any, context: any): void;
        drawOnInteracting(gl: any, view: any, scene: any, camera: any, event: any, timeStamp: any, context: any): void;
        coordinateToVector3(coordinate: maptalks.Coordinate, z?: number | undefined, out: any): THREE.Vector3;
        coordinatiesToGLFloatArray(coordinaties: any, centerPt: any): {
            positions: Float32Array;
            positons2d: Float32Array;
        } | null;
        coordinatiesToGLArray(coordinaties: any, centerPt: any): any[] | null;
        distanceToVector3(w: number, h: number, coord: any): THREE.Vector3;
        altitudeToVector3(altitude: any, altitude1: any, coord: any, out: any): any;
        toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape;
        toExtrudeMesh(polygon: any, altitude: any, material: any, height: any): any;
        toExtrudePolygon(polygon: maptalks.Polygon | maptalks.MultiPolygon, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBar(coordinate: maptalks.Coordinate, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toLine(lineString: maptalks.LineString, options: Object, material: THREE.LineMaterial): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLine(lineString: maptalks.LineString, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toModel(model: THREE.Mesh | THREE.Group, options: Object): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLineTrail(lineString: maptalks.LineString, options: any, material: THREE.Material): {
            [x: string]: any;
            _params: {
                index: number;
                chunkLines: any[][];
                geometries: never[];
                layer: any;
                trail: number;
                lineWidth: any;
                depth: any;
                speed: number;
                idx: number;
                loaded: boolean;
                center: any;
                centerPt: any;
                workerInitCount: number;
            };
            type: string;
            _init(params: any): void;
            _animation(): void;
            _workerLoad(result: any): any | undefined;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudePolygons(polygons: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toPoint(coordinate: maptalks.Coordinate, options: any, material: any): {
            [x: string]: any;
            type: string;
            identify(coordinate: maptalks.Coordinate): boolean;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toPoints(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            faceIndex: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            _geometryCache: any;
            isHide: boolean;
            _grids: {
                minlng: any;
                minlat: any;
                maxlng: any;
                maxlat: any;
                minx: number;
                miny: number;
                maxx: number;
                maxy: number;
                coordinates: any[];
                positions: any[];
                indexs: any[];
                key: any;
                updateBBoxPixel(map: any): any;
                containsCoordinate(c: any): boolean;
                isRecCross(pixel: any, size: any): boolean;
            }[];
            type: string;
            maxSize: number;
            _bindMapEvents(): void;
            _updateGrids(): void;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: maptalks.Coordinate): boolean;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toBars(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                _workerLoad(data: any): void;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(): any;
            getSelectMesh(): {
                data: any;
                baseObject: {
                    [x: string]: any;
                    type: string;
                    _workerLoad(data: any): void;
                    isAdd: boolean;
                    _mouseover: boolean;
                    _visible: boolean;
                    _zoomVisible: boolean;
                    picked: boolean;
                    isBaseObject: boolean;
                    id: any;
                    addTo(layer: any): any;
                    remove(): any;
                    getObject3d(): any;
                    getId(): any;
                    setId(id: any): any;
                    getType(): any;
                    getOptions(): any;
                    getProperties(): any;
                    setProperties(property: any): any;
                    getLayer(): any;
                    getMap(): any;
                    getCenter(): any;
                    getAltitude(): any;
                    setAltitude(altitude: any): any;
                    supportHeight(): any;
                    getHeight(): any;
                    setHeight(height: any): any;
                    show(): any;
                    hide(): any;
                    isVisible(): boolean;
                    getSymbol(): any;
                    setSymbol(material: any): any;
                    setInfoWindow(options: any): any;
                    infoWindow: any;
                    getInfoWindow(): any;
                    openInfoWindow(coordinate: any): any;
                    closeInfoWindow(): any;
                    removeInfoWindow(): any;
                    setToolTip(content: any, options: any): any;
                    toolTip: any;
                    getToolTip(): any;
                    openToolTip(coordinate: any): any;
                    closeToolTip(): any;
                    removeToolTip(): any;
                    _hideUI(): any;
                    animateShow(options: any, cb: any): any;
                    _showPlayer: any;
                    getMinZoom(): any;
                    getMaxZoom(): any;
                    isAsynchronous(): any;
                    readonly bloom: any;
                    fire(eventType: any, param: any): any;
                    config(): any;
                    setPickObject3d(object3d: any): any;
                    pickObject3d: any;
                    _initOptions(options: any): any;
                    options: any;
                    _createMesh(geometry: any, material: any): any;
                    object3d: any;
                    _createInstancedMesh(geometry: any, material: any, count: any): any;
                    _createGroup(): any;
                    _createLine(geometry: any, material: any): any;
                    _createLine2(geometry: any, material: any): any;
                    _createPoints(geometry: any, material: any): any;
                    _createLineSegments(geometry: any, material: any): any;
                    _computeLineDistances(geometry: any): void;
                };
            } | undefined;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toExtrudeLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _setPickObject3d(): void;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toThreeVectorTileLayer(url: any, options: any, getMaterial: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            getMaterial: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _layerLaodTime: number;
            formatBaseObjects(index: any, json: any): any[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            _getMaterial(layerName: any, data: any, index: any, geojson: any): any;
            material: any;
            isAsynchronous(): any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toTerrain(extent: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            updateData(image: any): any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toTerrainVectorTileLayer(url: any, options: any, material: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            material: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _imgQueue: {};
            _layerLaodTime: number;
            isAsynchronous(): boolean;
            formatBaseObjects(index: any, image: any): {
                [x: string]: any;
                type: string;
                updateData(image: any): any;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            getMaterial: any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toHeatMap(data: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLine(lineString: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            _init(): void;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): boolean;
            setSymbol(material: any): any;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLines(lineStrings: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceStart: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceEnd: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: {
                [x: string]: any;
                isLineGeometry: boolean;
                type: string;
                fromLine(line: any): any;
                isLineSegmentsGeometry: boolean;
                applyMatrix(matrix: any): any;
                setPositions(array: any): any;
                setColors(array: any): any;
                fromWireframeGeometry(geometry: any): any;
                fromEdgesGeometry(geometry: any): any;
                fromMesh(mesh: any): any;
                fromLineSegements(lineSegments: any): any;
                computeBoundingBox(): void;
                boundingBox: any;
                computeBoundingSphere(): void;
                boundingSphere: any;
                toJSON(): void;
                copy(source: any): any;
            };
            _colorMap: {};
            isHide: boolean;
            type: string;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): any;
            setSymbol(material: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toBox(coorindate: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBoxs(points: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(coordinate: any): any;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        getBaseObjects(): any[];
        getMeshes(): any[];
        clear(): any;
        clearMesh(): any;
        lookAt(vector: any): any;
        getCamera(): any;
        getScene(): any;
        renderScene(context: any, layer: any): any;
        loop(render?: boolean): void;
        renderPickScene(): any;
        getThreeRenderer(): any;
        getPick(): any;
        delayAddMesh(meshes: any): any;
        addMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        removeMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        _initRaycaster(): any;
        _raycaster: any;
        _mouse: any;
        getRaycaster(): any;
        identify(coordinate: Coordinate, options: Object): any[];
        _containerPoint: any;
        _recursionMesh(mesh: any): any;
        _getLinePrecision(res?: number): number;
        _identifyBaseObjectEvents(event: any): any;
        _getEventParams(e: any): {
            domEvent: any;
        };
        _zoomend(): void;
        _getGeometryEventMapPanel(): any;
        onAdd(): any;
        _identifyBaseObjectEventsThis: ((event: any) => any) | undefined;
        _zoomendThis: (() => void) | undefined;
        onRemove(): any;
        _callbackBaseObjectAnimation(): any;
        _getFovRatio(): number;
    };
    addMesh(meshes: {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    }, render?: boolean): {
        [x: string]: any;
        _animationBaseObjectMap: {};
        _needsUpdate: boolean;
        _mousemoveTimeOut: number;
        _mousedownTime: number;
        _baseObjects: any[];
        _delayMeshes: any[];
        type: string;
        isMercator(): boolean;
        isRendering(): any;
        prepareToDraw(...args: any[]): void;
        draw(gl: any, view: any, scene: any, camera: any, timeStamp: any, context: any): void;
        drawOnInteracting(gl: any, view: any, scene: any, camera: any, event: any, timeStamp: any, context: any): void;
        coordinateToVector3(coordinate: maptalks.Coordinate, z?: number | undefined, out: any): THREE.Vector3;
        coordinatiesToGLFloatArray(coordinaties: any, centerPt: any): {
            positions: Float32Array;
            positons2d: Float32Array;
        } | null;
        coordinatiesToGLArray(coordinaties: any, centerPt: any): any[] | null;
        distanceToVector3(w: number, h: number, coord: any): THREE.Vector3;
        altitudeToVector3(altitude: any, altitude1: any, coord: any, out: any): any;
        toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape;
        toExtrudeMesh(polygon: any, altitude: any, material: any, height: any): any;
        toExtrudePolygon(polygon: maptalks.Polygon | maptalks.MultiPolygon, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBar(coordinate: maptalks.Coordinate, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toLine(lineString: maptalks.LineString, options: Object, material: THREE.LineMaterial): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLine(lineString: maptalks.LineString, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toModel(model: THREE.Mesh | THREE.Group, options: Object): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLineTrail(lineString: maptalks.LineString, options: any, material: THREE.Material): {
            [x: string]: any;
            _params: {
                index: number;
                chunkLines: any[][];
                geometries: never[];
                layer: any;
                trail: number;
                lineWidth: any;
                depth: any;
                speed: number;
                idx: number;
                loaded: boolean;
                center: any;
                centerPt: any;
                workerInitCount: number;
            };
            type: string;
            _init(params: any): void;
            _animation(): void;
            _workerLoad(result: any): any | undefined;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudePolygons(polygons: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toPoint(coordinate: maptalks.Coordinate, options: any, material: any): {
            [x: string]: any;
            type: string;
            identify(coordinate: maptalks.Coordinate): boolean;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toPoints(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            faceIndex: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            _geometryCache: any;
            isHide: boolean;
            _grids: {
                minlng: any;
                minlat: any;
                maxlng: any;
                maxlat: any;
                minx: number;
                miny: number;
                maxx: number;
                maxy: number;
                coordinates: any[];
                positions: any[];
                indexs: any[];
                key: any;
                updateBBoxPixel(map: any): any;
                containsCoordinate(c: any): boolean;
                isRecCross(pixel: any, size: any): boolean;
            }[];
            type: string;
            maxSize: number;
            _bindMapEvents(): void;
            _updateGrids(): void;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: maptalks.Coordinate): boolean;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toBars(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                _workerLoad(data: any): void;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(): any;
            getSelectMesh(): {
                data: any;
                baseObject: {
                    [x: string]: any;
                    type: string;
                    _workerLoad(data: any): void;
                    isAdd: boolean;
                    _mouseover: boolean;
                    _visible: boolean;
                    _zoomVisible: boolean;
                    picked: boolean;
                    isBaseObject: boolean;
                    id: any;
                    addTo(layer: any): any;
                    remove(): any;
                    getObject3d(): any;
                    getId(): any;
                    setId(id: any): any;
                    getType(): any;
                    getOptions(): any;
                    getProperties(): any;
                    setProperties(property: any): any;
                    getLayer(): any;
                    getMap(): any;
                    getCenter(): any;
                    getAltitude(): any;
                    setAltitude(altitude: any): any;
                    supportHeight(): any;
                    getHeight(): any;
                    setHeight(height: any): any;
                    show(): any;
                    hide(): any;
                    isVisible(): boolean;
                    getSymbol(): any;
                    setSymbol(material: any): any;
                    setInfoWindow(options: any): any;
                    infoWindow: any;
                    getInfoWindow(): any;
                    openInfoWindow(coordinate: any): any;
                    closeInfoWindow(): any;
                    removeInfoWindow(): any;
                    setToolTip(content: any, options: any): any;
                    toolTip: any;
                    getToolTip(): any;
                    openToolTip(coordinate: any): any;
                    closeToolTip(): any;
                    removeToolTip(): any;
                    _hideUI(): any;
                    animateShow(options: any, cb: any): any;
                    _showPlayer: any;
                    getMinZoom(): any;
                    getMaxZoom(): any;
                    isAsynchronous(): any;
                    readonly bloom: any;
                    fire(eventType: any, param: any): any;
                    config(): any;
                    setPickObject3d(object3d: any): any;
                    pickObject3d: any;
                    _initOptions(options: any): any;
                    options: any;
                    _createMesh(geometry: any, material: any): any;
                    object3d: any;
                    _createInstancedMesh(geometry: any, material: any, count: any): any;
                    _createGroup(): any;
                    _createLine(geometry: any, material: any): any;
                    _createLine2(geometry: any, material: any): any;
                    _createPoints(geometry: any, material: any): any;
                    _createLineSegments(geometry: any, material: any): any;
                    _computeLineDistances(geometry: any): void;
                };
            } | undefined;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toExtrudeLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _setPickObject3d(): void;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toThreeVectorTileLayer(url: any, options: any, getMaterial: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            getMaterial: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _layerLaodTime: number;
            formatBaseObjects(index: any, json: any): any[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            _getMaterial(layerName: any, data: any, index: any, geojson: any): any;
            material: any;
            isAsynchronous(): any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toTerrain(extent: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            updateData(image: any): any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toTerrainVectorTileLayer(url: any, options: any, material: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            material: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _imgQueue: {};
            _layerLaodTime: number;
            isAsynchronous(): boolean;
            formatBaseObjects(index: any, image: any): {
                [x: string]: any;
                type: string;
                updateData(image: any): any;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            getMaterial: any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toHeatMap(data: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLine(lineString: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            _init(): void;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): boolean;
            setSymbol(material: any): any;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLines(lineStrings: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceStart: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceEnd: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: {
                [x: string]: any;
                isLineGeometry: boolean;
                type: string;
                fromLine(line: any): any;
                isLineSegmentsGeometry: boolean;
                applyMatrix(matrix: any): any;
                setPositions(array: any): any;
                setColors(array: any): any;
                fromWireframeGeometry(geometry: any): any;
                fromEdgesGeometry(geometry: any): any;
                fromMesh(mesh: any): any;
                fromLineSegements(lineSegments: any): any;
                computeBoundingBox(): void;
                boundingBox: any;
                computeBoundingSphere(): void;
                boundingSphere: any;
                toJSON(): void;
                copy(source: any): any;
            };
            _colorMap: {};
            isHide: boolean;
            type: string;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): any;
            setSymbol(material: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toBox(coorindate: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBoxs(points: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(coordinate: any): any;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        getBaseObjects(): any[];
        getMeshes(): any[];
        clear(): any;
        clearMesh(): any;
        lookAt(vector: any): any;
        getCamera(): any;
        getScene(): any;
        renderScene(context: any, layer: any): any;
        loop(render?: boolean): void;
        renderPickScene(): any;
        getThreeRenderer(): any;
        getPick(): any;
        delayAddMesh(meshes: any): any;
        addMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        removeMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        _initRaycaster(): any;
        _raycaster: any;
        _mouse: any;
        getRaycaster(): any;
        identify(coordinate: Coordinate, options: Object): any[];
        _containerPoint: any;
        _recursionMesh(mesh: any): any;
        _getLinePrecision(res?: number): number;
        _identifyBaseObjectEvents(event: any): any;
        _getEventParams(e: any): {
            domEvent: any;
        };
        _zoomend(): void;
        _getGeometryEventMapPanel(): any;
        onAdd(): any;
        _identifyBaseObjectEventsThis: ((event: any) => any) | undefined;
        _zoomendThis: (() => void) | undefined;
        onRemove(): any;
        _callbackBaseObjectAnimation(): any;
        _getFovRatio(): number;
    };
    removeMesh(meshes: {
        [x: string]: any;
        isAdd: boolean;
        _mouseover: boolean;
        _visible: boolean;
        _zoomVisible: boolean;
        picked: boolean;
        isBaseObject: boolean;
        id: any;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): any;
        getId(): any;
        setId(id: any): any;
        getType(): any;
        getOptions(): any;
        getProperties(): any;
        setProperties(property: any): any;
        getLayer(): any;
        getMap(): any;
        getCenter(): any;
        getAltitude(): any;
        setAltitude(altitude: any): any;
        supportHeight(): any;
        getHeight(): any;
        setHeight(height: any): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): any;
        setSymbol(material: any): any;
        setInfoWindow(options: any): any;
        infoWindow: any;
        getInfoWindow(): any;
        openInfoWindow(coordinate: any): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: any, options: any): any;
        toolTip: any;
        getToolTip(): any;
        openToolTip(coordinate: any): any;
        closeToolTip(): any;
        removeToolTip(): any;
        _hideUI(): any;
        animateShow(options: any, cb: any): any;
        _showPlayer: any;
        getMinZoom(): any;
        getMaxZoom(): any;
        isAsynchronous(): any;
        readonly bloom: any;
        fire(eventType: any, param: any): any;
        config(): any;
        setPickObject3d(object3d: any): any;
        pickObject3d: any;
        _initOptions(options: any): any;
        options: any;
        _createMesh(geometry: any, material: any): any;
        object3d: any;
        _createInstancedMesh(geometry: any, material: any, count: any): any;
        _createGroup(): any;
        _createLine(geometry: any, material: any): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: any, material: any): any;
        _createLineSegments(geometry: any, material: any): any;
        _computeLineDistances(geometry: any): void;
    }, render?: boolean): {
        [x: string]: any;
        _animationBaseObjectMap: {};
        _needsUpdate: boolean;
        _mousemoveTimeOut: number;
        _mousedownTime: number;
        _baseObjects: any[];
        _delayMeshes: any[];
        type: string;
        isMercator(): boolean;
        isRendering(): any;
        prepareToDraw(...args: any[]): void;
        draw(gl: any, view: any, scene: any, camera: any, timeStamp: any, context: any): void;
        drawOnInteracting(gl: any, view: any, scene: any, camera: any, event: any, timeStamp: any, context: any): void;
        coordinateToVector3(coordinate: maptalks.Coordinate, z?: number | undefined, out: any): THREE.Vector3;
        coordinatiesToGLFloatArray(coordinaties: any, centerPt: any): {
            positions: Float32Array;
            positons2d: Float32Array;
        } | null;
        coordinatiesToGLArray(coordinaties: any, centerPt: any): any[] | null;
        distanceToVector3(w: number, h: number, coord: any): THREE.Vector3;
        altitudeToVector3(altitude: any, altitude1: any, coord: any, out: any): any;
        toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape;
        toExtrudeMesh(polygon: any, altitude: any, material: any, height: any): any;
        toExtrudePolygon(polygon: maptalks.Polygon | maptalks.MultiPolygon, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBar(coordinate: maptalks.Coordinate, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toLine(lineString: maptalks.LineString, options: Object, material: THREE.LineMaterial): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLine(lineString: maptalks.LineString, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toModel(model: THREE.Mesh | THREE.Group, options: Object): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLineTrail(lineString: maptalks.LineString, options: any, material: THREE.Material): {
            [x: string]: any;
            _params: {
                index: number;
                chunkLines: any[][];
                geometries: never[];
                layer: any;
                trail: number;
                lineWidth: any;
                depth: any;
                speed: number;
                idx: number;
                loaded: boolean;
                center: any;
                centerPt: any;
                workerInitCount: number;
            };
            type: string;
            _init(params: any): void;
            _animation(): void;
            _workerLoad(result: any): any | undefined;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudePolygons(polygons: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toPoint(coordinate: maptalks.Coordinate, options: any, material: any): {
            [x: string]: any;
            type: string;
            identify(coordinate: maptalks.Coordinate): boolean;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toPoints(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            faceIndex: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            _geometryCache: any;
            isHide: boolean;
            _grids: {
                minlng: any;
                minlat: any;
                maxlng: any;
                maxlat: any;
                minx: number;
                miny: number;
                maxx: number;
                maxy: number;
                coordinates: any[];
                positions: any[];
                indexs: any[];
                key: any;
                updateBBoxPixel(map: any): any;
                containsCoordinate(c: any): boolean;
                isRecCross(pixel: any, size: any): boolean;
            }[];
            type: string;
            maxSize: number;
            _bindMapEvents(): void;
            _updateGrids(): void;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: maptalks.Coordinate): boolean;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toBars(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                _workerLoad(data: any): void;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(): any;
            getSelectMesh(): {
                data: any;
                baseObject: {
                    [x: string]: any;
                    type: string;
                    _workerLoad(data: any): void;
                    isAdd: boolean;
                    _mouseover: boolean;
                    _visible: boolean;
                    _zoomVisible: boolean;
                    picked: boolean;
                    isBaseObject: boolean;
                    id: any;
                    addTo(layer: any): any;
                    remove(): any;
                    getObject3d(): any;
                    getId(): any;
                    setId(id: any): any;
                    getType(): any;
                    getOptions(): any;
                    getProperties(): any;
                    setProperties(property: any): any;
                    getLayer(): any;
                    getMap(): any;
                    getCenter(): any;
                    getAltitude(): any;
                    setAltitude(altitude: any): any;
                    supportHeight(): any;
                    getHeight(): any;
                    setHeight(height: any): any;
                    show(): any;
                    hide(): any;
                    isVisible(): boolean;
                    getSymbol(): any;
                    setSymbol(material: any): any;
                    setInfoWindow(options: any): any;
                    infoWindow: any;
                    getInfoWindow(): any;
                    openInfoWindow(coordinate: any): any;
                    closeInfoWindow(): any;
                    removeInfoWindow(): any;
                    setToolTip(content: any, options: any): any;
                    toolTip: any;
                    getToolTip(): any;
                    openToolTip(coordinate: any): any;
                    closeToolTip(): any;
                    removeToolTip(): any;
                    _hideUI(): any;
                    animateShow(options: any, cb: any): any;
                    _showPlayer: any;
                    getMinZoom(): any;
                    getMaxZoom(): any;
                    isAsynchronous(): any;
                    readonly bloom: any;
                    fire(eventType: any, param: any): any;
                    config(): any;
                    setPickObject3d(object3d: any): any;
                    pickObject3d: any;
                    _initOptions(options: any): any;
                    options: any;
                    _createMesh(geometry: any, material: any): any;
                    object3d: any;
                    _createInstancedMesh(geometry: any, material: any, count: any): any;
                    _createGroup(): any;
                    _createLine(geometry: any, material: any): any;
                    _createLine2(geometry: any, material: any): any;
                    _createPoints(geometry: any, material: any): any;
                    _createLineSegments(geometry: any, material: any): any;
                    _computeLineDistances(geometry: any): void;
                };
            } | undefined;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toExtrudeLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _setPickObject3d(): void;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toThreeVectorTileLayer(url: any, options: any, getMaterial: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            getMaterial: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _layerLaodTime: number;
            formatBaseObjects(index: any, json: any): any[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            _getMaterial(layerName: any, data: any, index: any, geojson: any): any;
            material: any;
            isAsynchronous(): any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toTerrain(extent: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            updateData(image: any): any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toTerrainVectorTileLayer(url: any, options: any, material: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            material: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _imgQueue: {};
            _layerLaodTime: number;
            isAsynchronous(): boolean;
            formatBaseObjects(index: any, image: any): {
                [x: string]: any;
                type: string;
                updateData(image: any): any;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            getMaterial: any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toHeatMap(data: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLine(lineString: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            _init(): void;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): boolean;
            setSymbol(material: any): any;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLines(lineStrings: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceStart: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceEnd: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: {
                [x: string]: any;
                isLineGeometry: boolean;
                type: string;
                fromLine(line: any): any;
                isLineSegmentsGeometry: boolean;
                applyMatrix(matrix: any): any;
                setPositions(array: any): any;
                setColors(array: any): any;
                fromWireframeGeometry(geometry: any): any;
                fromEdgesGeometry(geometry: any): any;
                fromMesh(mesh: any): any;
                fromLineSegements(lineSegments: any): any;
                computeBoundingBox(): void;
                boundingBox: any;
                computeBoundingSphere(): void;
                boundingSphere: any;
                toJSON(): void;
                copy(source: any): any;
            };
            _colorMap: {};
            isHide: boolean;
            type: string;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): any;
            setSymbol(material: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toBox(coorindate: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBoxs(points: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(coordinate: any): any;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        getBaseObjects(): any[];
        getMeshes(): any[];
        clear(): any;
        clearMesh(): any;
        lookAt(vector: any): any;
        getCamera(): any;
        getScene(): any;
        renderScene(context: any, layer: any): any;
        loop(render?: boolean): void;
        renderPickScene(): any;
        getThreeRenderer(): any;
        getPick(): any;
        delayAddMesh(meshes: any): any;
        addMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        removeMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        _initRaycaster(): any;
        _raycaster: any;
        _mouse: any;
        getRaycaster(): any;
        identify(coordinate: Coordinate, options: Object): any[];
        _containerPoint: any;
        _recursionMesh(mesh: any): any;
        _getLinePrecision(res?: number): number;
        _identifyBaseObjectEvents(event: any): any;
        _getEventParams(e: any): {
            domEvent: any;
        };
        _zoomend(): void;
        _getGeometryEventMapPanel(): any;
        onAdd(): any;
        _identifyBaseObjectEventsThis: ((event: any) => any) | undefined;
        _zoomendThis: (() => void) | undefined;
        onRemove(): any;
        _callbackBaseObjectAnimation(): any;
        _getFovRatio(): number;
    };
    _initRaycaster(): {
        [x: string]: any;
        _animationBaseObjectMap: {};
        _needsUpdate: boolean;
        _mousemoveTimeOut: number;
        _mousedownTime: number;
        _baseObjects: any[];
        _delayMeshes: any[];
        type: string;
        isMercator(): boolean;
        isRendering(): any;
        prepareToDraw(...args: any[]): void;
        draw(gl: any, view: any, scene: any, camera: any, timeStamp: any, context: any): void;
        drawOnInteracting(gl: any, view: any, scene: any, camera: any, event: any, timeStamp: any, context: any): void;
        coordinateToVector3(coordinate: maptalks.Coordinate, z?: number | undefined, out: any): THREE.Vector3;
        coordinatiesToGLFloatArray(coordinaties: any, centerPt: any): {
            positions: Float32Array;
            positons2d: Float32Array;
        } | null;
        coordinatiesToGLArray(coordinaties: any, centerPt: any): any[] | null;
        distanceToVector3(w: number, h: number, coord: any): THREE.Vector3;
        altitudeToVector3(altitude: any, altitude1: any, coord: any, out: any): any;
        toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape;
        toExtrudeMesh(polygon: any, altitude: any, material: any, height: any): any;
        toExtrudePolygon(polygon: maptalks.Polygon | maptalks.MultiPolygon, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBar(coordinate: maptalks.Coordinate, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toLine(lineString: maptalks.LineString, options: Object, material: THREE.LineMaterial): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLine(lineString: maptalks.LineString, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toModel(model: THREE.Mesh | THREE.Group, options: Object): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLineTrail(lineString: maptalks.LineString, options: any, material: THREE.Material): {
            [x: string]: any;
            _params: {
                index: number;
                chunkLines: any[][];
                geometries: never[];
                layer: any;
                trail: number;
                lineWidth: any;
                depth: any;
                speed: number;
                idx: number;
                loaded: boolean;
                center: any;
                centerPt: any;
                workerInitCount: number;
            };
            type: string;
            _init(params: any): void;
            _animation(): void;
            _workerLoad(result: any): any | undefined;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudePolygons(polygons: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toPoint(coordinate: maptalks.Coordinate, options: any, material: any): {
            [x: string]: any;
            type: string;
            identify(coordinate: maptalks.Coordinate): boolean;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toPoints(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            faceIndex: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            _geometryCache: any;
            isHide: boolean;
            _grids: {
                minlng: any;
                minlat: any;
                maxlng: any;
                maxlat: any;
                minx: number;
                miny: number;
                maxx: number;
                maxy: number;
                coordinates: any[];
                positions: any[];
                indexs: any[];
                key: any;
                updateBBoxPixel(map: any): any;
                containsCoordinate(c: any): boolean;
                isRecCross(pixel: any, size: any): boolean;
            }[];
            type: string;
            maxSize: number;
            _bindMapEvents(): void;
            _updateGrids(): void;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: maptalks.Coordinate): boolean;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toBars(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                _workerLoad(data: any): void;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(): any;
            getSelectMesh(): {
                data: any;
                baseObject: {
                    [x: string]: any;
                    type: string;
                    _workerLoad(data: any): void;
                    isAdd: boolean;
                    _mouseover: boolean;
                    _visible: boolean;
                    _zoomVisible: boolean;
                    picked: boolean;
                    isBaseObject: boolean;
                    id: any;
                    addTo(layer: any): any;
                    remove(): any;
                    getObject3d(): any;
                    getId(): any;
                    setId(id: any): any;
                    getType(): any;
                    getOptions(): any;
                    getProperties(): any;
                    setProperties(property: any): any;
                    getLayer(): any;
                    getMap(): any;
                    getCenter(): any;
                    getAltitude(): any;
                    setAltitude(altitude: any): any;
                    supportHeight(): any;
                    getHeight(): any;
                    setHeight(height: any): any;
                    show(): any;
                    hide(): any;
                    isVisible(): boolean;
                    getSymbol(): any;
                    setSymbol(material: any): any;
                    setInfoWindow(options: any): any;
                    infoWindow: any;
                    getInfoWindow(): any;
                    openInfoWindow(coordinate: any): any;
                    closeInfoWindow(): any;
                    removeInfoWindow(): any;
                    setToolTip(content: any, options: any): any;
                    toolTip: any;
                    getToolTip(): any;
                    openToolTip(coordinate: any): any;
                    closeToolTip(): any;
                    removeToolTip(): any;
                    _hideUI(): any;
                    animateShow(options: any, cb: any): any;
                    _showPlayer: any;
                    getMinZoom(): any;
                    getMaxZoom(): any;
                    isAsynchronous(): any;
                    readonly bloom: any;
                    fire(eventType: any, param: any): any;
                    config(): any;
                    setPickObject3d(object3d: any): any;
                    pickObject3d: any;
                    _initOptions(options: any): any;
                    options: any;
                    _createMesh(geometry: any, material: any): any;
                    object3d: any;
                    _createInstancedMesh(geometry: any, material: any, count: any): any;
                    _createGroup(): any;
                    _createLine(geometry: any, material: any): any;
                    _createLine2(geometry: any, material: any): any;
                    _createPoints(geometry: any, material: any): any;
                    _createLineSegments(geometry: any, material: any): any;
                    _computeLineDistances(geometry: any): void;
                };
            } | undefined;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toExtrudeLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _setPickObject3d(): void;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toThreeVectorTileLayer(url: any, options: any, getMaterial: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            getMaterial: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _layerLaodTime: number;
            formatBaseObjects(index: any, json: any): any[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            _getMaterial(layerName: any, data: any, index: any, geojson: any): any;
            material: any;
            isAsynchronous(): any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toTerrain(extent: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            updateData(image: any): any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toTerrainVectorTileLayer(url: any, options: any, material: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            material: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _imgQueue: {};
            _layerLaodTime: number;
            isAsynchronous(): boolean;
            formatBaseObjects(index: any, image: any): {
                [x: string]: any;
                type: string;
                updateData(image: any): any;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            getMaterial: any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toHeatMap(data: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLine(lineString: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            _init(): void;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): boolean;
            setSymbol(material: any): any;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLines(lineStrings: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceStart: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceEnd: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: {
                [x: string]: any;
                isLineGeometry: boolean;
                type: string;
                fromLine(line: any): any;
                isLineSegmentsGeometry: boolean;
                applyMatrix(matrix: any): any;
                setPositions(array: any): any;
                setColors(array: any): any;
                fromWireframeGeometry(geometry: any): any;
                fromEdgesGeometry(geometry: any): any;
                fromMesh(mesh: any): any;
                fromLineSegements(lineSegments: any): any;
                computeBoundingBox(): void;
                boundingBox: any;
                computeBoundingSphere(): void;
                boundingSphere: any;
                toJSON(): void;
                copy(source: any): any;
            };
            _colorMap: {};
            isHide: boolean;
            type: string;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): any;
            setSymbol(material: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toBox(coorindate: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBoxs(points: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(coordinate: any): any;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        getBaseObjects(): any[];
        getMeshes(): any[];
        clear(): any;
        clearMesh(): any;
        lookAt(vector: any): any;
        getCamera(): any;
        getScene(): any;
        renderScene(context: any, layer: any): any;
        loop(render?: boolean): void;
        renderPickScene(): any;
        getThreeRenderer(): any;
        getPick(): any;
        delayAddMesh(meshes: any): any;
        addMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        removeMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        _initRaycaster(): any;
        _raycaster: any;
        _mouse: any;
        getRaycaster(): any;
        identify(coordinate: Coordinate, options: Object): any[];
        _containerPoint: any;
        _recursionMesh(mesh: any): any;
        _getLinePrecision(res?: number): number;
        _identifyBaseObjectEvents(event: any): any;
        _getEventParams(e: any): {
            domEvent: any;
        };
        _zoomend(): void;
        _getGeometryEventMapPanel(): any;
        onAdd(): any;
        _identifyBaseObjectEventsThis: ((event: any) => any) | undefined;
        _zoomendThis: (() => void) | undefined;
        onRemove(): any;
        _callbackBaseObjectAnimation(): any;
        _getFovRatio(): number;
    };
    _raycaster: any;
    _mouse: any;
    getRaycaster(): any;
    identify(coordinate: Coordinate, options: Object): any[];
    _containerPoint: any;
    _recursionMesh(mesh: any): any;
    _getLinePrecision(res?: number): number;
    _identifyBaseObjectEvents(event: any): {
        [x: string]: any;
        _animationBaseObjectMap: {};
        _needsUpdate: boolean;
        _mousemoveTimeOut: number;
        _mousedownTime: number;
        _baseObjects: any[];
        _delayMeshes: any[];
        type: string;
        isMercator(): boolean;
        isRendering(): any;
        prepareToDraw(...args: any[]): void;
        draw(gl: any, view: any, scene: any, camera: any, timeStamp: any, context: any): void;
        drawOnInteracting(gl: any, view: any, scene: any, camera: any, event: any, timeStamp: any, context: any): void;
        coordinateToVector3(coordinate: maptalks.Coordinate, z?: number | undefined, out: any): THREE.Vector3;
        coordinatiesToGLFloatArray(coordinaties: any, centerPt: any): {
            positions: Float32Array;
            positons2d: Float32Array;
        } | null;
        coordinatiesToGLArray(coordinaties: any, centerPt: any): any[] | null;
        distanceToVector3(w: number, h: number, coord: any): THREE.Vector3;
        altitudeToVector3(altitude: any, altitude1: any, coord: any, out: any): any;
        toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape;
        toExtrudeMesh(polygon: any, altitude: any, material: any, height: any): any;
        toExtrudePolygon(polygon: maptalks.Polygon | maptalks.MultiPolygon, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBar(coordinate: maptalks.Coordinate, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toLine(lineString: maptalks.LineString, options: Object, material: THREE.LineMaterial): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLine(lineString: maptalks.LineString, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toModel(model: THREE.Mesh | THREE.Group, options: Object): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLineTrail(lineString: maptalks.LineString, options: any, material: THREE.Material): {
            [x: string]: any;
            _params: {
                index: number;
                chunkLines: any[][];
                geometries: never[];
                layer: any;
                trail: number;
                lineWidth: any;
                depth: any;
                speed: number;
                idx: number;
                loaded: boolean;
                center: any;
                centerPt: any;
                workerInitCount: number;
            };
            type: string;
            _init(params: any): void;
            _animation(): void;
            _workerLoad(result: any): any | undefined;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudePolygons(polygons: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toPoint(coordinate: maptalks.Coordinate, options: any, material: any): {
            [x: string]: any;
            type: string;
            identify(coordinate: maptalks.Coordinate): boolean;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toPoints(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            faceIndex: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            _geometryCache: any;
            isHide: boolean;
            _grids: {
                minlng: any;
                minlat: any;
                maxlng: any;
                maxlat: any;
                minx: number;
                miny: number;
                maxx: number;
                maxy: number;
                coordinates: any[];
                positions: any[];
                indexs: any[];
                key: any;
                updateBBoxPixel(map: any): any;
                containsCoordinate(c: any): boolean;
                isRecCross(pixel: any, size: any): boolean;
            }[];
            type: string;
            maxSize: number;
            _bindMapEvents(): void;
            _updateGrids(): void;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: maptalks.Coordinate): boolean;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toBars(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                _workerLoad(data: any): void;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(): any;
            getSelectMesh(): {
                data: any;
                baseObject: {
                    [x: string]: any;
                    type: string;
                    _workerLoad(data: any): void;
                    isAdd: boolean;
                    _mouseover: boolean;
                    _visible: boolean;
                    _zoomVisible: boolean;
                    picked: boolean;
                    isBaseObject: boolean;
                    id: any;
                    addTo(layer: any): any;
                    remove(): any;
                    getObject3d(): any;
                    getId(): any;
                    setId(id: any): any;
                    getType(): any;
                    getOptions(): any;
                    getProperties(): any;
                    setProperties(property: any): any;
                    getLayer(): any;
                    getMap(): any;
                    getCenter(): any;
                    getAltitude(): any;
                    setAltitude(altitude: any): any;
                    supportHeight(): any;
                    getHeight(): any;
                    setHeight(height: any): any;
                    show(): any;
                    hide(): any;
                    isVisible(): boolean;
                    getSymbol(): any;
                    setSymbol(material: any): any;
                    setInfoWindow(options: any): any;
                    infoWindow: any;
                    getInfoWindow(): any;
                    openInfoWindow(coordinate: any): any;
                    closeInfoWindow(): any;
                    removeInfoWindow(): any;
                    setToolTip(content: any, options: any): any;
                    toolTip: any;
                    getToolTip(): any;
                    openToolTip(coordinate: any): any;
                    closeToolTip(): any;
                    removeToolTip(): any;
                    _hideUI(): any;
                    animateShow(options: any, cb: any): any;
                    _showPlayer: any;
                    getMinZoom(): any;
                    getMaxZoom(): any;
                    isAsynchronous(): any;
                    readonly bloom: any;
                    fire(eventType: any, param: any): any;
                    config(): any;
                    setPickObject3d(object3d: any): any;
                    pickObject3d: any;
                    _initOptions(options: any): any;
                    options: any;
                    _createMesh(geometry: any, material: any): any;
                    object3d: any;
                    _createInstancedMesh(geometry: any, material: any, count: any): any;
                    _createGroup(): any;
                    _createLine(geometry: any, material: any): any;
                    _createLine2(geometry: any, material: any): any;
                    _createPoints(geometry: any, material: any): any;
                    _createLineSegments(geometry: any, material: any): any;
                    _computeLineDistances(geometry: any): void;
                };
            } | undefined;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toExtrudeLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _setPickObject3d(): void;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toThreeVectorTileLayer(url: any, options: any, getMaterial: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            getMaterial: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _layerLaodTime: number;
            formatBaseObjects(index: any, json: any): any[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            _getMaterial(layerName: any, data: any, index: any, geojson: any): any;
            material: any;
            isAsynchronous(): any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toTerrain(extent: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            updateData(image: any): any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toTerrainVectorTileLayer(url: any, options: any, material: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            material: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _imgQueue: {};
            _layerLaodTime: number;
            isAsynchronous(): boolean;
            formatBaseObjects(index: any, image: any): {
                [x: string]: any;
                type: string;
                updateData(image: any): any;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            getMaterial: any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toHeatMap(data: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLine(lineString: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            _init(): void;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): boolean;
            setSymbol(material: any): any;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLines(lineStrings: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceStart: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceEnd: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: {
                [x: string]: any;
                isLineGeometry: boolean;
                type: string;
                fromLine(line: any): any;
                isLineSegmentsGeometry: boolean;
                applyMatrix(matrix: any): any;
                setPositions(array: any): any;
                setColors(array: any): any;
                fromWireframeGeometry(geometry: any): any;
                fromEdgesGeometry(geometry: any): any;
                fromMesh(mesh: any): any;
                fromLineSegements(lineSegments: any): any;
                computeBoundingBox(): void;
                boundingBox: any;
                computeBoundingSphere(): void;
                boundingSphere: any;
                toJSON(): void;
                copy(source: any): any;
            };
            _colorMap: {};
            isHide: boolean;
            type: string;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): any;
            setSymbol(material: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toBox(coorindate: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBoxs(points: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(coordinate: any): any;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        getBaseObjects(): any[];
        getMeshes(): any[];
        clear(): any;
        clearMesh(): any;
        lookAt(vector: any): any;
        getCamera(): any;
        getScene(): any;
        renderScene(context: any, layer: any): any;
        loop(render?: boolean): void;
        renderPickScene(): any;
        getThreeRenderer(): any;
        getPick(): any;
        delayAddMesh(meshes: any): any;
        addMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        removeMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        _initRaycaster(): any;
        _raycaster: any;
        _mouse: any;
        getRaycaster(): any;
        identify(coordinate: Coordinate, options: Object): any[];
        _containerPoint: any;
        _recursionMesh(mesh: any): any;
        _getLinePrecision(res?: number): number;
        _identifyBaseObjectEvents(event: any): any;
        _getEventParams(e: any): {
            domEvent: any;
        };
        _zoomend(): void;
        _getGeometryEventMapPanel(): any;
        onAdd(): any;
        _identifyBaseObjectEventsThis: ((event: any) => any) | undefined;
        _zoomendThis: (() => void) | undefined;
        onRemove(): any;
        _callbackBaseObjectAnimation(): any;
        _getFovRatio(): number;
    };
    _getEventParams(e: any): {
        domEvent: any;
    };
    _zoomend(): void;
    _getGeometryEventMapPanel(): any;
    onAdd(): {
        [x: string]: any;
        _animationBaseObjectMap: {};
        _needsUpdate: boolean;
        _mousemoveTimeOut: number;
        _mousedownTime: number;
        _baseObjects: any[];
        _delayMeshes: any[];
        type: string;
        isMercator(): boolean;
        isRendering(): any;
        prepareToDraw(...args: any[]): void;
        draw(gl: any, view: any, scene: any, camera: any, timeStamp: any, context: any): void;
        drawOnInteracting(gl: any, view: any, scene: any, camera: any, event: any, timeStamp: any, context: any): void;
        coordinateToVector3(coordinate: maptalks.Coordinate, z?: number | undefined, out: any): THREE.Vector3;
        coordinatiesToGLFloatArray(coordinaties: any, centerPt: any): {
            positions: Float32Array;
            positons2d: Float32Array;
        } | null;
        coordinatiesToGLArray(coordinaties: any, centerPt: any): any[] | null;
        distanceToVector3(w: number, h: number, coord: any): THREE.Vector3;
        altitudeToVector3(altitude: any, altitude1: any, coord: any, out: any): any;
        toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape;
        toExtrudeMesh(polygon: any, altitude: any, material: any, height: any): any;
        toExtrudePolygon(polygon: maptalks.Polygon | maptalks.MultiPolygon, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBar(coordinate: maptalks.Coordinate, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toLine(lineString: maptalks.LineString, options: Object, material: THREE.LineMaterial): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLine(lineString: maptalks.LineString, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toModel(model: THREE.Mesh | THREE.Group, options: Object): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLineTrail(lineString: maptalks.LineString, options: any, material: THREE.Material): {
            [x: string]: any;
            _params: {
                index: number;
                chunkLines: any[][];
                geometries: never[];
                layer: any;
                trail: number;
                lineWidth: any;
                depth: any;
                speed: number;
                idx: number;
                loaded: boolean;
                center: any;
                centerPt: any;
                workerInitCount: number;
            };
            type: string;
            _init(params: any): void;
            _animation(): void;
            _workerLoad(result: any): any | undefined;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudePolygons(polygons: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toPoint(coordinate: maptalks.Coordinate, options: any, material: any): {
            [x: string]: any;
            type: string;
            identify(coordinate: maptalks.Coordinate): boolean;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toPoints(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            faceIndex: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            _geometryCache: any;
            isHide: boolean;
            _grids: {
                minlng: any;
                minlat: any;
                maxlng: any;
                maxlat: any;
                minx: number;
                miny: number;
                maxx: number;
                maxy: number;
                coordinates: any[];
                positions: any[];
                indexs: any[];
                key: any;
                updateBBoxPixel(map: any): any;
                containsCoordinate(c: any): boolean;
                isRecCross(pixel: any, size: any): boolean;
            }[];
            type: string;
            maxSize: number;
            _bindMapEvents(): void;
            _updateGrids(): void;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: maptalks.Coordinate): boolean;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toBars(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                _workerLoad(data: any): void;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(): any;
            getSelectMesh(): {
                data: any;
                baseObject: {
                    [x: string]: any;
                    type: string;
                    _workerLoad(data: any): void;
                    isAdd: boolean;
                    _mouseover: boolean;
                    _visible: boolean;
                    _zoomVisible: boolean;
                    picked: boolean;
                    isBaseObject: boolean;
                    id: any;
                    addTo(layer: any): any;
                    remove(): any;
                    getObject3d(): any;
                    getId(): any;
                    setId(id: any): any;
                    getType(): any;
                    getOptions(): any;
                    getProperties(): any;
                    setProperties(property: any): any;
                    getLayer(): any;
                    getMap(): any;
                    getCenter(): any;
                    getAltitude(): any;
                    setAltitude(altitude: any): any;
                    supportHeight(): any;
                    getHeight(): any;
                    setHeight(height: any): any;
                    show(): any;
                    hide(): any;
                    isVisible(): boolean;
                    getSymbol(): any;
                    setSymbol(material: any): any;
                    setInfoWindow(options: any): any;
                    infoWindow: any;
                    getInfoWindow(): any;
                    openInfoWindow(coordinate: any): any;
                    closeInfoWindow(): any;
                    removeInfoWindow(): any;
                    setToolTip(content: any, options: any): any;
                    toolTip: any;
                    getToolTip(): any;
                    openToolTip(coordinate: any): any;
                    closeToolTip(): any;
                    removeToolTip(): any;
                    _hideUI(): any;
                    animateShow(options: any, cb: any): any;
                    _showPlayer: any;
                    getMinZoom(): any;
                    getMaxZoom(): any;
                    isAsynchronous(): any;
                    readonly bloom: any;
                    fire(eventType: any, param: any): any;
                    config(): any;
                    setPickObject3d(object3d: any): any;
                    pickObject3d: any;
                    _initOptions(options: any): any;
                    options: any;
                    _createMesh(geometry: any, material: any): any;
                    object3d: any;
                    _createInstancedMesh(geometry: any, material: any, count: any): any;
                    _createGroup(): any;
                    _createLine(geometry: any, material: any): any;
                    _createLine2(geometry: any, material: any): any;
                    _createPoints(geometry: any, material: any): any;
                    _createLineSegments(geometry: any, material: any): any;
                    _computeLineDistances(geometry: any): void;
                };
            } | undefined;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toExtrudeLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _setPickObject3d(): void;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toThreeVectorTileLayer(url: any, options: any, getMaterial: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            getMaterial: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _layerLaodTime: number;
            formatBaseObjects(index: any, json: any): any[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            _getMaterial(layerName: any, data: any, index: any, geojson: any): any;
            material: any;
            isAsynchronous(): any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toTerrain(extent: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            updateData(image: any): any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toTerrainVectorTileLayer(url: any, options: any, material: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            material: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _imgQueue: {};
            _layerLaodTime: number;
            isAsynchronous(): boolean;
            formatBaseObjects(index: any, image: any): {
                [x: string]: any;
                type: string;
                updateData(image: any): any;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            getMaterial: any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toHeatMap(data: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLine(lineString: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            _init(): void;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): boolean;
            setSymbol(material: any): any;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLines(lineStrings: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceStart: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceEnd: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: {
                [x: string]: any;
                isLineGeometry: boolean;
                type: string;
                fromLine(line: any): any;
                isLineSegmentsGeometry: boolean;
                applyMatrix(matrix: any): any;
                setPositions(array: any): any;
                setColors(array: any): any;
                fromWireframeGeometry(geometry: any): any;
                fromEdgesGeometry(geometry: any): any;
                fromMesh(mesh: any): any;
                fromLineSegements(lineSegments: any): any;
                computeBoundingBox(): void;
                boundingBox: any;
                computeBoundingSphere(): void;
                boundingSphere: any;
                toJSON(): void;
                copy(source: any): any;
            };
            _colorMap: {};
            isHide: boolean;
            type: string;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): any;
            setSymbol(material: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toBox(coorindate: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBoxs(points: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(coordinate: any): any;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        getBaseObjects(): any[];
        getMeshes(): any[];
        clear(): any;
        clearMesh(): any;
        lookAt(vector: any): any;
        getCamera(): any;
        getScene(): any;
        renderScene(context: any, layer: any): any;
        loop(render?: boolean): void;
        renderPickScene(): any;
        getThreeRenderer(): any;
        getPick(): any;
        delayAddMesh(meshes: any): any;
        addMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        removeMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        _initRaycaster(): any;
        _raycaster: any;
        _mouse: any;
        getRaycaster(): any;
        identify(coordinate: Coordinate, options: Object): any[];
        _containerPoint: any;
        _recursionMesh(mesh: any): any;
        _getLinePrecision(res?: number): number;
        _identifyBaseObjectEvents(event: any): any;
        _getEventParams(e: any): {
            domEvent: any;
        };
        _zoomend(): void;
        _getGeometryEventMapPanel(): any;
        onAdd(): any;
        _identifyBaseObjectEventsThis: ((event: any) => any) | undefined;
        _zoomendThis: (() => void) | undefined;
        onRemove(): any;
        _callbackBaseObjectAnimation(): any;
        _getFovRatio(): number;
    };
    _identifyBaseObjectEventsThis: ((event: any) => {
        [x: string]: any;
        _animationBaseObjectMap: {};
        _needsUpdate: boolean;
        _mousemoveTimeOut: number;
        _mousedownTime: number;
        _baseObjects: any[];
        _delayMeshes: any[];
        type: string;
        isMercator(): boolean;
        isRendering(): any;
        prepareToDraw(...args: any[]): void;
        draw(gl: any, view: any, scene: any, camera: any, timeStamp: any, context: any): void;
        drawOnInteracting(gl: any, view: any, scene: any, camera: any, event: any, timeStamp: any, context: any): void;
        coordinateToVector3(coordinate: maptalks.Coordinate, z?: number | undefined, out: any): THREE.Vector3;
        coordinatiesToGLFloatArray(coordinaties: any, centerPt: any): {
            positions: Float32Array;
            positons2d: Float32Array;
        } | null;
        coordinatiesToGLArray(coordinaties: any, centerPt: any): any[] | null;
        distanceToVector3(w: number, h: number, coord: any): THREE.Vector3;
        altitudeToVector3(altitude: any, altitude1: any, coord: any, out: any): any;
        toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape;
        toExtrudeMesh(polygon: any, altitude: any, material: any, height: any): any;
        toExtrudePolygon(polygon: maptalks.Polygon | maptalks.MultiPolygon, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBar(coordinate: maptalks.Coordinate, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toLine(lineString: maptalks.LineString, options: Object, material: THREE.LineMaterial): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLine(lineString: maptalks.LineString, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toModel(model: THREE.Mesh | THREE.Group, options: Object): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLineTrail(lineString: maptalks.LineString, options: any, material: THREE.Material): {
            [x: string]: any;
            _params: {
                index: number;
                chunkLines: any[][];
                geometries: never[];
                layer: any;
                trail: number;
                lineWidth: any;
                depth: any;
                speed: number;
                idx: number;
                loaded: boolean;
                center: any;
                centerPt: any;
                workerInitCount: number;
            };
            type: string;
            _init(params: any): void;
            _animation(): void;
            _workerLoad(result: any): any | undefined;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudePolygons(polygons: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toPoint(coordinate: maptalks.Coordinate, options: any, material: any): {
            [x: string]: any;
            type: string;
            identify(coordinate: maptalks.Coordinate): boolean;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toPoints(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            faceIndex: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            _geometryCache: any;
            isHide: boolean;
            _grids: {
                minlng: any;
                minlat: any;
                maxlng: any;
                maxlat: any;
                minx: number;
                miny: number;
                maxx: number;
                maxy: number;
                coordinates: any[];
                positions: any[];
                indexs: any[];
                key: any;
                updateBBoxPixel(map: any): any;
                containsCoordinate(c: any): boolean;
                isRecCross(pixel: any, size: any): boolean;
            }[];
            type: string;
            maxSize: number;
            _bindMapEvents(): void;
            _updateGrids(): void;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: maptalks.Coordinate): boolean;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toBars(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                _workerLoad(data: any): void;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(): any;
            getSelectMesh(): {
                data: any;
                baseObject: {
                    [x: string]: any;
                    type: string;
                    _workerLoad(data: any): void;
                    isAdd: boolean;
                    _mouseover: boolean;
                    _visible: boolean;
                    _zoomVisible: boolean;
                    picked: boolean;
                    isBaseObject: boolean;
                    id: any;
                    addTo(layer: any): any;
                    remove(): any;
                    getObject3d(): any;
                    getId(): any;
                    setId(id: any): any;
                    getType(): any;
                    getOptions(): any;
                    getProperties(): any;
                    setProperties(property: any): any;
                    getLayer(): any;
                    getMap(): any;
                    getCenter(): any;
                    getAltitude(): any;
                    setAltitude(altitude: any): any;
                    supportHeight(): any;
                    getHeight(): any;
                    setHeight(height: any): any;
                    show(): any;
                    hide(): any;
                    isVisible(): boolean;
                    getSymbol(): any;
                    setSymbol(material: any): any;
                    setInfoWindow(options: any): any;
                    infoWindow: any;
                    getInfoWindow(): any;
                    openInfoWindow(coordinate: any): any;
                    closeInfoWindow(): any;
                    removeInfoWindow(): any;
                    setToolTip(content: any, options: any): any;
                    toolTip: any;
                    getToolTip(): any;
                    openToolTip(coordinate: any): any;
                    closeToolTip(): any;
                    removeToolTip(): any;
                    _hideUI(): any;
                    animateShow(options: any, cb: any): any;
                    _showPlayer: any;
                    getMinZoom(): any;
                    getMaxZoom(): any;
                    isAsynchronous(): any;
                    readonly bloom: any;
                    fire(eventType: any, param: any): any;
                    config(): any;
                    setPickObject3d(object3d: any): any;
                    pickObject3d: any;
                    _initOptions(options: any): any;
                    options: any;
                    _createMesh(geometry: any, material: any): any;
                    object3d: any;
                    _createInstancedMesh(geometry: any, material: any, count: any): any;
                    _createGroup(): any;
                    _createLine(geometry: any, material: any): any;
                    _createLine2(geometry: any, material: any): any;
                    _createPoints(geometry: any, material: any): any;
                    _createLineSegments(geometry: any, material: any): any;
                    _computeLineDistances(geometry: any): void;
                };
            } | undefined;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toExtrudeLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _setPickObject3d(): void;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toThreeVectorTileLayer(url: any, options: any, getMaterial: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            getMaterial: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _layerLaodTime: number;
            formatBaseObjects(index: any, json: any): any[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            _getMaterial(layerName: any, data: any, index: any, geojson: any): any;
            material: any;
            isAsynchronous(): any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toTerrain(extent: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            updateData(image: any): any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toTerrainVectorTileLayer(url: any, options: any, material: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            material: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _imgQueue: {};
            _layerLaodTime: number;
            isAsynchronous(): boolean;
            formatBaseObjects(index: any, image: any): {
                [x: string]: any;
                type: string;
                updateData(image: any): any;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            getMaterial: any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toHeatMap(data: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLine(lineString: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            _init(): void;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): boolean;
            setSymbol(material: any): any;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLines(lineStrings: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceStart: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceEnd: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: {
                [x: string]: any;
                isLineGeometry: boolean;
                type: string;
                fromLine(line: any): any;
                isLineSegmentsGeometry: boolean;
                applyMatrix(matrix: any): any;
                setPositions(array: any): any;
                setColors(array: any): any;
                fromWireframeGeometry(geometry: any): any;
                fromEdgesGeometry(geometry: any): any;
                fromMesh(mesh: any): any;
                fromLineSegements(lineSegments: any): any;
                computeBoundingBox(): void;
                boundingBox: any;
                computeBoundingSphere(): void;
                boundingSphere: any;
                toJSON(): void;
                copy(source: any): any;
            };
            _colorMap: {};
            isHide: boolean;
            type: string;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): any;
            setSymbol(material: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toBox(coorindate: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBoxs(points: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(coordinate: any): any;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        getBaseObjects(): any[];
        getMeshes(): any[];
        clear(): any;
        clearMesh(): any;
        lookAt(vector: any): any;
        getCamera(): any;
        getScene(): any;
        renderScene(context: any, layer: any): any;
        loop(render?: boolean): void;
        renderPickScene(): any;
        getThreeRenderer(): any;
        getPick(): any;
        delayAddMesh(meshes: any): any;
        addMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        removeMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        _initRaycaster(): any;
        _raycaster: any;
        _mouse: any;
        getRaycaster(): any;
        identify(coordinate: Coordinate, options: Object): any[];
        _containerPoint: any;
        _recursionMesh(mesh: any): any;
        _getLinePrecision(res?: number): number;
        _identifyBaseObjectEvents(event: any): any;
        _getEventParams(e: any): {
            domEvent: any;
        };
        _zoomend(): void;
        _getGeometryEventMapPanel(): any;
        onAdd(): any;
        _identifyBaseObjectEventsThis: ((event: any) => any) | undefined;
        _zoomendThis: (() => void) | undefined;
        onRemove(): any;
        _callbackBaseObjectAnimation(): any;
        _getFovRatio(): number;
    }) | undefined;
    _zoomendThis: (() => void) | undefined;
    onRemove(): {
        [x: string]: any;
        _animationBaseObjectMap: {};
        _needsUpdate: boolean;
        _mousemoveTimeOut: number;
        _mousedownTime: number;
        _baseObjects: any[];
        _delayMeshes: any[];
        type: string;
        isMercator(): boolean;
        isRendering(): any;
        prepareToDraw(...args: any[]): void;
        draw(gl: any, view: any, scene: any, camera: any, timeStamp: any, context: any): void;
        drawOnInteracting(gl: any, view: any, scene: any, camera: any, event: any, timeStamp: any, context: any): void;
        coordinateToVector3(coordinate: maptalks.Coordinate, z?: number | undefined, out: any): THREE.Vector3;
        coordinatiesToGLFloatArray(coordinaties: any, centerPt: any): {
            positions: Float32Array;
            positons2d: Float32Array;
        } | null;
        coordinatiesToGLArray(coordinaties: any, centerPt: any): any[] | null;
        distanceToVector3(w: number, h: number, coord: any): THREE.Vector3;
        altitudeToVector3(altitude: any, altitude1: any, coord: any, out: any): any;
        toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape;
        toExtrudeMesh(polygon: any, altitude: any, material: any, height: any): any;
        toExtrudePolygon(polygon: maptalks.Polygon | maptalks.MultiPolygon, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBar(coordinate: maptalks.Coordinate, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toLine(lineString: maptalks.LineString, options: Object, material: THREE.LineMaterial): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLine(lineString: maptalks.LineString, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toModel(model: THREE.Mesh | THREE.Group, options: Object): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLineTrail(lineString: maptalks.LineString, options: any, material: THREE.Material): {
            [x: string]: any;
            _params: {
                index: number;
                chunkLines: any[][];
                geometries: never[];
                layer: any;
                trail: number;
                lineWidth: any;
                depth: any;
                speed: number;
                idx: number;
                loaded: boolean;
                center: any;
                centerPt: any;
                workerInitCount: number;
            };
            type: string;
            _init(params: any): void;
            _animation(): void;
            _workerLoad(result: any): any | undefined;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudePolygons(polygons: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toPoint(coordinate: maptalks.Coordinate, options: any, material: any): {
            [x: string]: any;
            type: string;
            identify(coordinate: maptalks.Coordinate): boolean;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toPoints(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            faceIndex: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            _geometryCache: any;
            isHide: boolean;
            _grids: {
                minlng: any;
                minlat: any;
                maxlng: any;
                maxlat: any;
                minx: number;
                miny: number;
                maxx: number;
                maxy: number;
                coordinates: any[];
                positions: any[];
                indexs: any[];
                key: any;
                updateBBoxPixel(map: any): any;
                containsCoordinate(c: any): boolean;
                isRecCross(pixel: any, size: any): boolean;
            }[];
            type: string;
            maxSize: number;
            _bindMapEvents(): void;
            _updateGrids(): void;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: maptalks.Coordinate): boolean;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toBars(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                _workerLoad(data: any): void;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(): any;
            getSelectMesh(): {
                data: any;
                baseObject: {
                    [x: string]: any;
                    type: string;
                    _workerLoad(data: any): void;
                    isAdd: boolean;
                    _mouseover: boolean;
                    _visible: boolean;
                    _zoomVisible: boolean;
                    picked: boolean;
                    isBaseObject: boolean;
                    id: any;
                    addTo(layer: any): any;
                    remove(): any;
                    getObject3d(): any;
                    getId(): any;
                    setId(id: any): any;
                    getType(): any;
                    getOptions(): any;
                    getProperties(): any;
                    setProperties(property: any): any;
                    getLayer(): any;
                    getMap(): any;
                    getCenter(): any;
                    getAltitude(): any;
                    setAltitude(altitude: any): any;
                    supportHeight(): any;
                    getHeight(): any;
                    setHeight(height: any): any;
                    show(): any;
                    hide(): any;
                    isVisible(): boolean;
                    getSymbol(): any;
                    setSymbol(material: any): any;
                    setInfoWindow(options: any): any;
                    infoWindow: any;
                    getInfoWindow(): any;
                    openInfoWindow(coordinate: any): any;
                    closeInfoWindow(): any;
                    removeInfoWindow(): any;
                    setToolTip(content: any, options: any): any;
                    toolTip: any;
                    getToolTip(): any;
                    openToolTip(coordinate: any): any;
                    closeToolTip(): any;
                    removeToolTip(): any;
                    _hideUI(): any;
                    animateShow(options: any, cb: any): any;
                    _showPlayer: any;
                    getMinZoom(): any;
                    getMaxZoom(): any;
                    isAsynchronous(): any;
                    readonly bloom: any;
                    fire(eventType: any, param: any): any;
                    config(): any;
                    setPickObject3d(object3d: any): any;
                    pickObject3d: any;
                    _initOptions(options: any): any;
                    options: any;
                    _createMesh(geometry: any, material: any): any;
                    object3d: any;
                    _createInstancedMesh(geometry: any, material: any, count: any): any;
                    _createGroup(): any;
                    _createLine(geometry: any, material: any): any;
                    _createLine2(geometry: any, material: any): any;
                    _createPoints(geometry: any, material: any): any;
                    _createLineSegments(geometry: any, material: any): any;
                    _computeLineDistances(geometry: any): void;
                };
            } | undefined;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toExtrudeLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _setPickObject3d(): void;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toThreeVectorTileLayer(url: any, options: any, getMaterial: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            getMaterial: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _layerLaodTime: number;
            formatBaseObjects(index: any, json: any): any[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            _getMaterial(layerName: any, data: any, index: any, geojson: any): any;
            material: any;
            isAsynchronous(): any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toTerrain(extent: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            updateData(image: any): any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toTerrainVectorTileLayer(url: any, options: any, material: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            material: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _imgQueue: {};
            _layerLaodTime: number;
            isAsynchronous(): boolean;
            formatBaseObjects(index: any, image: any): {
                [x: string]: any;
                type: string;
                updateData(image: any): any;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            getMaterial: any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toHeatMap(data: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLine(lineString: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            _init(): void;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): boolean;
            setSymbol(material: any): any;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLines(lineStrings: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceStart: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceEnd: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: {
                [x: string]: any;
                isLineGeometry: boolean;
                type: string;
                fromLine(line: any): any;
                isLineSegmentsGeometry: boolean;
                applyMatrix(matrix: any): any;
                setPositions(array: any): any;
                setColors(array: any): any;
                fromWireframeGeometry(geometry: any): any;
                fromEdgesGeometry(geometry: any): any;
                fromMesh(mesh: any): any;
                fromLineSegements(lineSegments: any): any;
                computeBoundingBox(): void;
                boundingBox: any;
                computeBoundingSphere(): void;
                boundingSphere: any;
                toJSON(): void;
                copy(source: any): any;
            };
            _colorMap: {};
            isHide: boolean;
            type: string;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): any;
            setSymbol(material: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toBox(coorindate: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBoxs(points: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(coordinate: any): any;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        getBaseObjects(): any[];
        getMeshes(): any[];
        clear(): any;
        clearMesh(): any;
        lookAt(vector: any): any;
        getCamera(): any;
        getScene(): any;
        renderScene(context: any, layer: any): any;
        loop(render?: boolean): void;
        renderPickScene(): any;
        getThreeRenderer(): any;
        getPick(): any;
        delayAddMesh(meshes: any): any;
        addMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        removeMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        _initRaycaster(): any;
        _raycaster: any;
        _mouse: any;
        getRaycaster(): any;
        identify(coordinate: Coordinate, options: Object): any[];
        _containerPoint: any;
        _recursionMesh(mesh: any): any;
        _getLinePrecision(res?: number): number;
        _identifyBaseObjectEvents(event: any): any;
        _getEventParams(e: any): {
            domEvent: any;
        };
        _zoomend(): void;
        _getGeometryEventMapPanel(): any;
        onAdd(): any;
        _identifyBaseObjectEventsThis: ((event: any) => any) | undefined;
        _zoomendThis: (() => void) | undefined;
        onRemove(): any;
        _callbackBaseObjectAnimation(): any;
        _getFovRatio(): number;
    };
    _callbackBaseObjectAnimation(): {
        [x: string]: any;
        _animationBaseObjectMap: {};
        _needsUpdate: boolean;
        _mousemoveTimeOut: number;
        _mousedownTime: number;
        _baseObjects: any[];
        _delayMeshes: any[];
        type: string;
        isMercator(): boolean;
        isRendering(): any;
        prepareToDraw(...args: any[]): void;
        draw(gl: any, view: any, scene: any, camera: any, timeStamp: any, context: any): void;
        drawOnInteracting(gl: any, view: any, scene: any, camera: any, event: any, timeStamp: any, context: any): void;
        coordinateToVector3(coordinate: maptalks.Coordinate, z?: number | undefined, out: any): THREE.Vector3;
        coordinatiesToGLFloatArray(coordinaties: any, centerPt: any): {
            positions: Float32Array;
            positons2d: Float32Array;
        } | null;
        coordinatiesToGLArray(coordinaties: any, centerPt: any): any[] | null;
        distanceToVector3(w: number, h: number, coord: any): THREE.Vector3;
        altitudeToVector3(altitude: any, altitude1: any, coord: any, out: any): any;
        toShape(polygon: maptalks.Polygon | maptalks.MultiPolygon): THREE.Shape;
        toExtrudeMesh(polygon: any, altitude: any, material: any, height: any): any;
        toExtrudePolygon(polygon: maptalks.Polygon | maptalks.MultiPolygon, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBar(coordinate: maptalks.Coordinate, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(data: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toLine(lineString: maptalks.LineString, options: Object, material: THREE.LineMaterial): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLine(lineString: maptalks.LineString, options: Object, material: THREE.Material): {
            [x: string]: any;
            type: string;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toModel(model: THREE.Mesh | THREE.Group, options: Object): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudeLineTrail(lineString: maptalks.LineString, options: any, material: THREE.Material): {
            [x: string]: any;
            _params: {
                index: number;
                chunkLines: any[][];
                geometries: never[];
                layer: any;
                trail: number;
                lineWidth: any;
                depth: any;
                speed: number;
                idx: number;
                loaded: boolean;
                center: any;
                centerPt: any;
                workerInitCount: number;
            };
            type: string;
            _init(params: any): void;
            _animation(): void;
            _workerLoad(result: any): any | undefined;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toExtrudePolygons(polygons: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toPoint(coordinate: maptalks.Coordinate, options: any, material: any): {
            [x: string]: any;
            type: string;
            identify(coordinate: maptalks.Coordinate): boolean;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toPoints(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            faceIndex: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            _geometryCache: any;
            isHide: boolean;
            _grids: {
                minlng: any;
                minlat: any;
                maxlng: any;
                maxlat: any;
                minx: number;
                miny: number;
                maxx: number;
                maxy: number;
                coordinates: any[];
                positions: any[];
                indexs: any[];
                key: any;
                updateBBoxPixel(map: any): any;
                containsCoordinate(c: any): boolean;
                isRecCross(pixel: any, size: any): boolean;
            }[];
            type: string;
            maxSize: number;
            _bindMapEvents(): void;
            _updateGrids(): void;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: maptalks.Coordinate): boolean;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toBars(points: any[], options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                _workerLoad(data: any): void;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(): any;
            getSelectMesh(): {
                data: any;
                baseObject: {
                    [x: string]: any;
                    type: string;
                    _workerLoad(data: any): void;
                    isAdd: boolean;
                    _mouseover: boolean;
                    _visible: boolean;
                    _zoomVisible: boolean;
                    picked: boolean;
                    isBaseObject: boolean;
                    id: any;
                    addTo(layer: any): any;
                    remove(): any;
                    getObject3d(): any;
                    getId(): any;
                    setId(id: any): any;
                    getType(): any;
                    getOptions(): any;
                    getProperties(): any;
                    setProperties(property: any): any;
                    getLayer(): any;
                    getMap(): any;
                    getCenter(): any;
                    getAltitude(): any;
                    setAltitude(altitude: any): any;
                    supportHeight(): any;
                    getHeight(): any;
                    setHeight(height: any): any;
                    show(): any;
                    hide(): any;
                    isVisible(): boolean;
                    getSymbol(): any;
                    setSymbol(material: any): any;
                    setInfoWindow(options: any): any;
                    infoWindow: any;
                    getInfoWindow(): any;
                    openInfoWindow(coordinate: any): any;
                    closeInfoWindow(): any;
                    removeInfoWindow(): any;
                    setToolTip(content: any, options: any): any;
                    toolTip: any;
                    getToolTip(): any;
                    openToolTip(coordinate: any): any;
                    closeToolTip(): any;
                    removeToolTip(): any;
                    _hideUI(): any;
                    animateShow(options: any, cb: any): any;
                    _showPlayer: any;
                    getMinZoom(): any;
                    getMaxZoom(): any;
                    isAsynchronous(): any;
                    readonly bloom: any;
                    fire(eventType: any, param: any): any;
                    config(): any;
                    setPickObject3d(object3d: any): any;
                    pickObject3d: any;
                    _initOptions(options: any): any;
                    options: any;
                    _createMesh(geometry: any, material: any): any;
                    object3d: any;
                    _createInstancedMesh(geometry: any, material: any, count: any): any;
                    _createGroup(): any;
                    _createLine(geometry: any, material: any): any;
                    _createLine2(geometry: any, material: any): any;
                    _createPoints(geometry: any, material: any): any;
                    _createLineSegments(geometry: any, material: any): any;
                    _computeLineDistances(geometry: any): void;
                };
            } | undefined;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toExtrudeLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    middleZ: number;
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        toLines(lineStrings: any[][maptalks.LineString], options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _setPickObject3d(): void;
            identify(coordinate: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toThreeVectorTileLayer(url: any, options: any, getMaterial: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            getMaterial: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _layerLaodTime: number;
            formatBaseObjects(index: any, json: any): any[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            _getMaterial(layerName: any, data: any, index: any, geojson: any): any;
            material: any;
            isAsynchronous(): any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toTerrain(extent: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            updateData(image: any): any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toTerrainVectorTileLayer(url: any, options: any, material: any): {
            [x: string]: any;
            _opts: {};
            _layer: any;
            material: any;
            _baseObjectKeys: {};
            _loadTiles: {};
            _add: any;
            _imgQueue: {};
            _layerLaodTime: number;
            isAsynchronous(): boolean;
            formatBaseObjects(index: any, image: any): {
                [x: string]: any;
                type: string;
                updateData(image: any): any;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            loopMessage(q: any): void;
            _init(): void;
            intervalId: NodeJS.Timer | undefined;
            getMaterial: any;
            getBaseObjects(): any[];
            onSelectMesh(type: any, e: any): void;
            getTileData(q: any): void;
            _getCurentTileKeys(): {
                keys: any[];
                keysMap: {};
            };
            _isLoad(): boolean;
            _layerOnLoad(): void;
            _workerLoad(e: any): void;
            _generateBaseObjects(index: any, res: any, img: any): void;
            _diffCache(): void;
            _diposeBaseObject(index: any): void;
            _cachetile(index: any, baseobject: any): void;
            _getXYZOfIndex(index: any): {
                x: number;
                y: number;
                z: number;
            };
            _getTileExtent(x: any, y: any, z: any): any;
            _getTileLngLatExtent(x: any, y: any, z: any): any;
        };
        toHeatMap(data: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLine(lineString: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            _init(): void;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): boolean;
            setSymbol(material: any): any;
            _workerLoad(result: any): void;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toFatLines(lineStrings: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: any[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceStart: {
                    count: number;
                    start: number;
                    end: number;
                };
                instanceEnd: {
                    count: number;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            index: any;
            _geometryCache: {
                [x: string]: any;
                isLineGeometry: boolean;
                type: string;
                fromLine(line: any): any;
                isLineSegmentsGeometry: boolean;
                applyMatrix(matrix: any): any;
                setPositions(array: any): any;
                setColors(array: any): any;
                fromWireframeGeometry(geometry: any): any;
                fromEdgesGeometry(geometry: any): any;
                fromMesh(mesh: any): any;
                fromLineSegements(lineSegments: any): any;
                computeBoundingBox(): void;
                boundingBox: any;
                computeBoundingSphere(): void;
                boundingSphere: any;
                toJSON(): void;
                copy(source: any): any;
            };
            _colorMap: {};
            isHide: boolean;
            type: string;
            _setMaterialRes(layer: any, material: any): void;
            _setPickObject3d(ps: any, linewidth: any): void;
            identify(coordinate: any): any;
            setSymbol(material: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            _workerLoad(result: any): void;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _getIndex(faceIndex: any): any;
            _init(): void;
        };
        toBox(coorindate: any, options: any, material: any): {
            [x: string]: any;
            type: string;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        };
        toBoxs(points: any, options: any, material: any): {
            [x: string]: any;
            _baseObjects: {
                [x: string]: any;
                type: string;
                isAdd: boolean;
                _mouseover: boolean;
                _visible: boolean;
                _zoomVisible: boolean;
                picked: boolean;
                isBaseObject: boolean;
                id: any;
                addTo(layer: any): any;
                remove(): any;
                getObject3d(): any;
                getId(): any;
                setId(id: any): any;
                getType(): any;
                getOptions(): any;
                getProperties(): any;
                setProperties(property: any): any;
                getLayer(): any;
                getMap(): any;
                getCenter(): any;
                getAltitude(): any;
                setAltitude(altitude: any): any;
                supportHeight(): any;
                getHeight(): any;
                setHeight(height: any): any;
                show(): any;
                hide(): any;
                isVisible(): boolean;
                getSymbol(): any;
                setSymbol(material: any): any;
                setInfoWindow(options: any): any;
                infoWindow: any;
                getInfoWindow(): any;
                openInfoWindow(coordinate: any): any;
                closeInfoWindow(): any;
                removeInfoWindow(): any;
                setToolTip(content: any, options: any): any;
                toolTip: any;
                getToolTip(): any;
                openToolTip(coordinate: any): any;
                closeToolTip(): any;
                removeToolTip(): any;
                _hideUI(): any;
                animateShow(options: any, cb: any): any;
                _showPlayer: any;
                getMinZoom(): any;
                getMaxZoom(): any;
                isAsynchronous(): any;
                readonly bloom: any;
                fire(eventType: any, param: any): any;
                config(): any;
                setPickObject3d(object3d: any): any;
                pickObject3d: any;
                _initOptions(options: any): any;
                options: any;
                _createMesh(geometry: any, material: any): any;
                object3d: any;
                _createInstancedMesh(geometry: any, material: any, count: any): any;
                _createGroup(): any;
                _createLine(geometry: any, material: any): any;
                _createLine2(geometry: any, material: any): any;
                _createPoints(geometry: any, material: any): any;
                _createLineSegments(geometry: any, material: any): any;
                _computeLineDistances(geometry: any): void;
            }[];
            _datas: any;
            _geometriesAttributes: {
                position: {
                    count: any;
                    start: number;
                    end: number;
                };
                hide: boolean;
            }[];
            faceIndex: any;
            _geometryCache: any;
            isHide: boolean;
            _colorMap: {};
            type: string;
            identify(coordinate: any): any;
            _initBaseObjectsEvent(baseObjects: any): any;
            _proxyEvent(baseObject: any): void;
            _mouseover: boolean | undefined;
            _getHideGeometryIndex(attribute: any): {
                indexs: number[];
                count: number;
            };
            _updateAttribute(bufferAttribute: any, attribute: any): any;
            _showGeometry(baseObject: any, isHide: any): any;
            getSelectMesh(): {
                data: any;
                baseObject: any;
            } | undefined;
            _getIndex(faceIndex: any): any;
            _init(): void;
            _setPickObject3d(): void;
        };
        getBaseObjects(): any[];
        getMeshes(): any[];
        clear(): any;
        clearMesh(): any;
        lookAt(vector: any): any;
        getCamera(): any;
        getScene(): any;
        renderScene(context: any, layer: any): any;
        loop(render?: boolean): void;
        renderPickScene(): any;
        getThreeRenderer(): any;
        getPick(): any;
        delayAddMesh(meshes: any): any;
        addMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        removeMesh(meshes: {
            [x: string]: any;
            isAdd: boolean;
            _mouseover: boolean;
            _visible: boolean;
            _zoomVisible: boolean;
            picked: boolean;
            isBaseObject: boolean;
            id: any;
            addTo(layer: any): any;
            remove(): any;
            getObject3d(): any;
            getId(): any;
            setId(id: any): any;
            getType(): any;
            getOptions(): any;
            getProperties(): any;
            setProperties(property: any): any;
            getLayer(): any;
            getMap(): any;
            getCenter(): any;
            getAltitude(): any;
            setAltitude(altitude: any): any;
            supportHeight(): any;
            getHeight(): any;
            setHeight(height: any): any;
            show(): any;
            hide(): any;
            isVisible(): boolean;
            getSymbol(): any;
            setSymbol(material: any): any;
            setInfoWindow(options: any): any;
            infoWindow: any;
            getInfoWindow(): any;
            openInfoWindow(coordinate: any): any;
            closeInfoWindow(): any;
            removeInfoWindow(): any;
            setToolTip(content: any, options: any): any;
            toolTip: any;
            getToolTip(): any;
            openToolTip(coordinate: any): any;
            closeToolTip(): any;
            removeToolTip(): any;
            _hideUI(): any;
            animateShow(options: any, cb: any): any;
            _showPlayer: any;
            getMinZoom(): any;
            getMaxZoom(): any;
            isAsynchronous(): any;
            readonly bloom: any;
            fire(eventType: any, param: any): any;
            config(): any;
            setPickObject3d(object3d: any): any;
            pickObject3d: any;
            _initOptions(options: any): any;
            options: any;
            _createMesh(geometry: any, material: any): any;
            object3d: any;
            _createInstancedMesh(geometry: any, material: any, count: any): any;
            _createGroup(): any;
            _createLine(geometry: any, material: any): any;
            _createLine2(geometry: any, material: any): any;
            _createPoints(geometry: any, material: any): any;
            _createLineSegments(geometry: any, material: any): any;
            _computeLineDistances(geometry: any): void;
        }, render?: boolean): any;
        _initRaycaster(): any;
        _raycaster: any;
        _mouse: any;
        getRaycaster(): any;
        identify(coordinate: Coordinate, options: Object): any[];
        _containerPoint: any;
        _recursionMesh(mesh: any): any;
        _getLinePrecision(res?: number): number;
        _identifyBaseObjectEvents(event: any): any;
        _getEventParams(e: any): {
            domEvent: any;
        };
        _zoomend(): void;
        _getGeometryEventMapPanel(): any;
        onAdd(): any;
        _identifyBaseObjectEventsThis: ((event: any) => any) | undefined;
        _zoomendThis: (() => void) | undefined;
        onRemove(): any;
        _callbackBaseObjectAnimation(): any;
        _getFovRatio(): number;
    };
    _getFovRatio(): number;
}
declare const ThreeRenderer_base: any;
export class ThreeRenderer extends ThreeRenderer_base {
    [x: string]: any;
    constructor(...args: any[]);
    _renderTime: number;
    _renderTarget: any;
    getPrepareParams(): any[];
    getDrawParams(): any[];
    _drawLayer(...args: any[]): void;
    hitDetect(): boolean;
    createCanvas(): void;
    createContext(): void;
    gl: any;
    _initThreeRenderer(): void;
    matrix4: any;
    context: any;
    scene: any;
    camera: any;
    pick: {
        object3ds: any[];
        layer: any;
        camera: any;
        renderer: any;
        pickingTexture: any;
        pickingScene: any;
        getColor(): any;
        add(object3d: any): any;
        remove(object3d: any): any;
        isEmpty(): boolean;
        pick(pixel: any): void;
    } | undefined;
    onCanvasCreate(): void;
    resizeCanvas(canvasSize: any): {
        [x: string]: any;
        _renderTime: number;
        _renderTarget: any;
        getPrepareParams(): any[];
        getDrawParams(): any[];
        _drawLayer(...args: any[]): void;
        hitDetect(): boolean;
        createCanvas(): void;
        createContext(): void;
        gl: any;
        _initThreeRenderer(): void;
        matrix4: any;
        context: any;
        scene: any;
        camera: any;
        pick: {
            object3ds: any[];
            layer: any;
            camera: any;
            renderer: any;
            pickingTexture: any;
            pickingScene: any;
            getColor(): any;
            add(object3d: any): any;
            remove(object3d: any): any;
            isEmpty(): boolean;
            pick(pixel: any): void;
        } | undefined;
        onCanvasCreate(): void;
        resizeCanvas(canvasSize: any): any | undefined;
        clearCanvas(): void;
        prepareCanvas(): null;
        renderScene(context: any): void;
        remove(): void;
        _syncCamera(): void;
        _createGLContext(canvas: any, options: any): any;
    } | undefined;
    clearCanvas(): void;
    prepareCanvas(): null;
    renderScene(context: any): void;
    remove(): void;
    _syncCamera(): void;
    _createGLContext(canvas: any, options: any): any;
}
declare var main: Readonly<{
    __proto__: null;
    triangulate: (vertices: any, holes: any, dimensions?: number) => any;
    flatten: (data: any) => any;
    offsetPolygon: (vertices: any, holes: any, offset: any, miterLimit: any, close: any) => never[] | Float32Array;
    extrudePolygon: (polygons: any[], opts?: {
        depth?: number | Function | undefined;
        bevelSize?: number | undefined;
        bevelSegments?: number | undefined;
        simplify?: number | undefined;
        smoothSide?: boolean | undefined;
        smoothSideThreshold?: boolean | undefined;
        smoothBevel?: boolean | undefined;
        excludeBottom?: boolean | undefined;
        fitRect?: Object | undefined;
        translate?: any[] | undefined;
        scale?: any[] | undefined;
    } | undefined) => Object;
    extrudePolyline: (polylines: any[], opts?: {
        depth?: number | undefined;
        bevelSize?: number | undefined;
        bevelSegments?: number | undefined;
        simplify?: number | undefined;
        smoothSide?: boolean | undefined;
        smoothSideThreshold?: boolean | undefined;
        smoothBevel?: boolean | undefined;
        excludeBottom?: boolean | undefined;
        lineWidth?: boolean | undefined;
        miterLimit?: boolean | undefined;
        fitRect?: Object | undefined;
        translate?: any[] | undefined;
        scale?: any[] | undefined;
        boundingRect?: Object | undefined;
    } | undefined) => Object;
    extrudeGeoJSON: (geojson: Object, opts?: {
        depth?: number | undefined;
        bevelSize?: number | undefined;
        bevelSegments?: number | undefined;
        simplify?: number | undefined;
        smoothSide?: boolean | undefined;
        smoothSideThreshold?: boolean | undefined;
        smoothBevel?: boolean | undefined;
        excludeBottom?: boolean | undefined;
        lineWidth?: boolean | undefined;
        miterLimit?: boolean | undefined;
        fitRect?: Object | undefined;
        translate?: any[] | undefined;
        scale?: any[] | undefined;
        boundingRect?: Object | undefined;
    } | undefined) => Object;
}>;
export function getFetchDataActor(): any;
declare var polyExtrude$1: any;
export { main as geometryExtrude, polyExtrude$1 as polyextrude };
//# sourceMappingURL=maptalks.three.d.ts.map